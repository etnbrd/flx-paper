%!PS-Adobe-3.1
%ADO_DSC_Encoding: MacOS Roman
%%Title: <FEFF747374617365702E666400000000000000000000>
%%Creator: Adobe Acrobat 9.5.3
%%For: <FEFF7465006E5E600A46E05C0A39000000000000000000000000>
%%CreationDate: 12/09/2015, 04:16:36 PM
%%BoundingBox: 0 575 446 792
%%HiResBoundingBox: 0 575.8870 445.5830 792
%%CropBox: 0 575.8870 445.5830 792
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%PageOrder: Ascend
%%Pages: (atend)
%%DocumentProcessColors: (atend)
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq{pop}{setblackgeneration}ifelse
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq{pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 33776 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.2.1-c043 52.372728, 2009/01/18-13:18:53        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
    xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
    xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
    xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/"
    xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
    xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
    xmlns:stFnt="http://ns.adobe.com/xap/1.0/sType/Font#"
    xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
   dc:format="application/pdf"
   xmp:MetadataDate="2015-12-01T16:42:12+01:00"
   xmp:ModifyDate="2015-12-01T16:42:12+01:00"
   xmp:CreateDate="2015-08-31T16:08:28+02:00"
   xmp:CreatorTool="Adobe Illustrator CC 2014 (Macintosh)"
   xmpMM:InstanceID="uuid:a6ecec4f-ff3a-184f-a5fe-df0f569967d3"
   xmpMM:DocumentID="xmp.did:d23c5175-8d30-46e3-bf49-60c9717dd323"
   xmpMM:OriginalDocumentID="uuid:5D20892493BFDB11914A8590D31508C8"
   xmpMM:RenditionClass="proof:pdf"
   illustrator:StartupProfile="Print"
   xmpTPg:HasVisibleOverprint="False"
   xmpTPg:HasVisibleTransparency="False"
   xmpTPg:NPages="1"
   pdf:Producer="Adobe PDF library 10.01">
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">Print</rdf:li>
    </rdf:Alt>
   </dc:title>
   <xmp:Thumbnails>
    <rdf:Alt>
     <rdf:li
      xmpGImg:width="256"
      xmpGImg:height="128"
      xmpGImg:format="JPEG"
      xmpGImg:image="/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAgAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9TiRT0rTrXif6Yq4SKex&#xA;/wCBP9MVd6i+B2/yT/TFXeovgdv8k/0xV3qLStD/AMCf6Yq71FpWh/4E/wBMVd6i0rQ/8Cf6Yq71&#xA;FpWh/wCBP9MVd6i+B3/yT/TFXeovgd/8k/0xV3qL4Hf/ACT/AExVxkUdj/wJ/pirjIo7H/gT/TFX&#xA;GRQaUP8AwJ/pirua1pQ16dD/AExVwkUmlD/wJ/pirg6k0Fa9dwR+vFXMS8bek4DUIViOQDDbcAit&#xA;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"/>
    </rdf:Alt>
   </xmp:Thumbnails>
   <xmpMM:DerivedFrom
    stRef:instanceID="uuid:d1c078a0-2746-42b2-b0d1-25aedff8fb1e"
    stRef:documentID="xmp.did:1b6690ed-28a8-c141-9479-b6a9cf6be651"
    stRef:originalDocumentID="uuid:5D20892493BFDB11914A8590D31508C8"
    stRef:renditionClass="proof:pdf"/>
   <xmpMM:History>
    <rdf:Seq>
     <rdf:li
      stEvt:action="saved"
      stEvt:instanceID="xmp.iid:d23c5175-8d30-46e3-bf49-60c9717dd323"
      stEvt:when="2015-08-31T16:08:28+02:00"
      stEvt:softwareAgent="Adobe Illustrator CC 2014 (Macintosh)"
      stEvt:changed="/"/>
    </rdf:Seq>
   </xmpMM:History>
   <xmpTPg:MaxPageSize
    stDim:w="445.583333"
    stDim:h="216.113282"
    stDim:unit="Points"/>
   <xmpTPg:Fonts>
    <rdf:Bag>
     <rdf:li
      stFnt:fontName="Inconsolata"
      stFnt:fontFamily="Inconsolata"
      stFnt:fontFace="Medium"
      stFnt:fontType="Open Type"
      stFnt:versionString="Version 001.010 "
      stFnt:composite="False"
      stFnt:fontFileName="Inconsolata.otf"/>
    </rdf:Bag>
   </xmpTPg:Fonts>
   <xmpTPg:PlateNames>
    <rdf:Seq>
     <rdf:li>Cyan</rdf:li>
     <rdf:li>Magenta</rdf:li>
     <rdf:li>Yellow</rdf:li>
     <rdf:li>Black</rdf:li>
    </rdf:Seq>
   </xmpTPg:PlateNames>
   <xmpTPg:SwatchGroups>
    <rdf:Seq>
     <rdf:li>
      <rdf:Description
       xmpG:groupName="Default Swatch Group"
       xmpG:groupType="0">
      <xmpG:Colorants>
       <rdf:Seq>
        <rdf:li
         xmpG:swatchName="White"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="0.000000"
         xmpG:magenta="0.000000"
         xmpG:yellow="0.000000"
         xmpG:black="0.000000"/>
        <rdf:li
         xmpG:swatchName="Black"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="0.000000"
         xmpG:magenta="0.000000"
         xmpG:yellow="0.000000"
         xmpG:black="100.000000"/>
        <rdf:li
         xmpG:swatchName="CMYK Red"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="0.000000"
         xmpG:magenta="100.000000"
         xmpG:yellow="100.000000"
         xmpG:black="0.000000"/>
        <rdf:li
         xmpG:swatchName="CMYK Yellow"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="0.000000"
         xmpG:magenta="0.000000"
         xmpG:yellow="100.000000"
         xmpG:black="0.000000"/>
        <rdf:li
         xmpG:swatchName="CMYK Green"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="100.000000"
         xmpG:magenta="0.000000"
         xmpG:yellow="100.000000"
         xmpG:black="0.000000"/>
        <rdf:li
         xmpG:swatchName="CMYK Cyan"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="100.000000"
         xmpG:magenta="0.000000"
         xmpG:yellow="0.000000"
         xmpG:black="0.000000"/>
        <rdf:li
         xmpG:swatchName="CMYK Blue"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="100.000000"
         xmpG:magenta="100.000000"
         xmpG:yellow="0.000000"
         xmpG:black="0.000000"/>
        <rdf:li
         xmpG:swatchName="CMYK Magenta"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="0.000000"
         xmpG:magenta="100.000000"
         xmpG:yellow="0.000000"
         xmpG:black="0.000000"/>
        <rdf:li
         xmpG:swatchName="C=15 M=100 Y=90 K=10"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="15.000000"
         xmpG:magenta="100.000000"
         xmpG:yellow="90.000000"
         xmpG:black="10.000000"/>
        <rdf:li
         xmpG:swatchName="C=0 M=90 Y=85 K=0"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="0.000000"
         xmpG:magenta="90.000000"
         xmpG:yellow="85.000000"
         xmpG:black="0.000000"/>
        <rdf:li
         xmpG:swatchName="C=0 M=80 Y=95 K=0"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="0.000000"
         xmpG:magenta="80.000000"
         xmpG:yellow="95.000000"
         xmpG:black="0.000000"/>
        <rdf:li
         xmpG:swatchName="C=0 M=50 Y=100 K=0"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="0.000000"
         xmpG:magenta="50.000000"
         xmpG:yellow="100.000000"
         xmpG:black="0.000000"/>
        <rdf:li
         xmpG:swatchName="C=0 M=35 Y=85 K=0"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="0.000000"
         xmpG:magenta="35.000000"
         xmpG:yellow="85.000000"
         xmpG:black="0.000000"/>
        <rdf:li
         xmpG:swatchName="C=5 M=0 Y=90 K=0"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="5.000000"
         xmpG:magenta="0.000000"
         xmpG:yellow="90.000000"
         xmpG:black="0.000000"/>
        <rdf:li
         xmpG:swatchName="C=20 M=0 Y=100 K=0"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="20.000000"
         xmpG:magenta="0.000000"
         xmpG:yellow="100.000000"
         xmpG:black="0.000000"/>
        <rdf:li
         xmpG:swatchName="C=50 M=0 Y=100 K=0"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="50.000000"
         xmpG:magenta="0.000000"
         xmpG:yellow="100.000000"
         xmpG:black="0.000000"/>
        <rdf:li
         xmpG:swatchName="C=75 M=0 Y=100 K=0"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="75.000000"
         xmpG:magenta="0.000000"
         xmpG:yellow="100.000000"
         xmpG:black="0.000000"/>
        <rdf:li
         xmpG:swatchName="C=85 M=10 Y=100 K=10"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="85.000000"
         xmpG:magenta="10.000000"
         xmpG:yellow="100.000000"
         xmpG:black="10.000000"/>
        <rdf:li
         xmpG:swatchName="C=90 M=30 Y=95 K=30"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="90.000000"
         xmpG:magenta="30.000000"
         xmpG:yellow="95.000000"
         xmpG:black="30.000000"/>
        <rdf:li
         xmpG:swatchName="C=75 M=0 Y=75 K=0"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="75.000000"
         xmpG:magenta="0.000000"
         xmpG:yellow="75.000000"
         xmpG:black="0.000000"/>
        <rdf:li
         xmpG:swatchName="C=80 M=10 Y=45 K=0"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="80.000000"
         xmpG:magenta="10.000000"
         xmpG:yellow="45.000000"
         xmpG:black="0.000000"/>
        <rdf:li
         xmpG:swatchName="C=70 M=15 Y=0 K=0"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="70.000000"
         xmpG:magenta="15.000000"
         xmpG:yellow="0.000000"
         xmpG:black="0.000000"/>
        <rdf:li
         xmpG:swatchName="C=85 M=50 Y=0 K=0"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="85.000000"
         xmpG:magenta="50.000000"
         xmpG:yellow="0.000000"
         xmpG:black="0.000000"/>
        <rdf:li
         xmpG:swatchName="C=100 M=95 Y=5 K=0"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="100.000000"
         xmpG:magenta="95.000000"
         xmpG:yellow="5.000000"
         xmpG:black="0.000000"/>
        <rdf:li
         xmpG:swatchName="C=100 M=100 Y=25 K=25"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="100.000000"
         xmpG:magenta="100.000000"
         xmpG:yellow="25.000000"
         xmpG:black="25.000000"/>
        <rdf:li
         xmpG:swatchName="C=75 M=100 Y=0 K=0"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="75.000000"
         xmpG:magenta="100.000000"
         xmpG:yellow="0.000000"
         xmpG:black="0.000000"/>
        <rdf:li
         xmpG:swatchName="C=50 M=100 Y=0 K=0"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="50.000000"
         xmpG:magenta="100.000000"
         xmpG:yellow="0.000000"
         xmpG:black="0.000000"/>
        <rdf:li
         xmpG:swatchName="C=35 M=100 Y=35 K=10"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="35.000000"
         xmpG:magenta="100.000000"
         xmpG:yellow="35.000000"
         xmpG:black="10.000000"/>
        <rdf:li
         xmpG:swatchName="C=10 M=100 Y=50 K=0"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="10.000000"
         xmpG:magenta="100.000000"
         xmpG:yellow="50.000000"
         xmpG:black="0.000000"/>
        <rdf:li
         xmpG:swatchName="C=0 M=95 Y=20 K=0"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="0.000000"
         xmpG:magenta="95.000000"
         xmpG:yellow="20.000000"
         xmpG:black="0.000000"/>
        <rdf:li
         xmpG:swatchName="C=25 M=25 Y=40 K=0"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="25.000000"
         xmpG:magenta="25.000000"
         xmpG:yellow="40.000000"
         xmpG:black="0.000000"/>
        <rdf:li
         xmpG:swatchName="C=40 M=45 Y=50 K=5"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="40.000000"
         xmpG:magenta="45.000000"
         xmpG:yellow="50.000000"
         xmpG:black="5.000000"/>
        <rdf:li
         xmpG:swatchName="C=50 M=50 Y=60 K=25"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="50.000000"
         xmpG:magenta="50.000000"
         xmpG:yellow="60.000000"
         xmpG:black="25.000000"/>
        <rdf:li
         xmpG:swatchName="C=55 M=60 Y=65 K=40"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="55.000000"
         xmpG:magenta="60.000000"
         xmpG:yellow="65.000000"
         xmpG:black="40.000000"/>
        <rdf:li
         xmpG:swatchName="C=25 M=40 Y=65 K=0"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="25.000000"
         xmpG:magenta="40.000000"
         xmpG:yellow="65.000000"
         xmpG:black="0.000000"/>
        <rdf:li
         xmpG:swatchName="C=30 M=50 Y=75 K=10"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="30.000000"
         xmpG:magenta="50.000000"
         xmpG:yellow="75.000000"
         xmpG:black="10.000000"/>
        <rdf:li
         xmpG:swatchName="C=35 M=60 Y=80 K=25"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="35.000000"
         xmpG:magenta="60.000000"
         xmpG:yellow="80.000000"
         xmpG:black="25.000000"/>
        <rdf:li
         xmpG:swatchName="C=40 M=65 Y=90 K=35"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="40.000000"
         xmpG:magenta="65.000000"
         xmpG:yellow="90.000000"
         xmpG:black="35.000000"/>
        <rdf:li
         xmpG:swatchName="C=40 M=70 Y=100 K=50"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="40.000000"
         xmpG:magenta="70.000000"
         xmpG:yellow="100.000000"
         xmpG:black="50.000000"/>
        <rdf:li
         xmpG:swatchName="C=50 M=70 Y=80 K=70"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="50.000000"
         xmpG:magenta="70.000000"
         xmpG:yellow="80.000000"
         xmpG:black="70.000000"/>
       </rdf:Seq>
      </xmpG:Colorants>
      </rdf:Description>
     </rdf:li>
     <rdf:li>
      <rdf:Description
       xmpG:groupName="Grays"
       xmpG:groupType="1">
      <xmpG:Colorants>
       <rdf:Seq>
        <rdf:li
         xmpG:swatchName="C=0 M=0 Y=0 K=100"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="0.000000"
         xmpG:magenta="0.000000"
         xmpG:yellow="0.000000"
         xmpG:black="100.000000"/>
        <rdf:li
         xmpG:swatchName="C=0 M=0 Y=0 K=90"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="0.000000"
         xmpG:magenta="0.000000"
         xmpG:yellow="0.000000"
         xmpG:black="89.999400"/>
        <rdf:li
         xmpG:swatchName="C=0 M=0 Y=0 K=80"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="0.000000"
         xmpG:magenta="0.000000"
         xmpG:yellow="0.000000"
         xmpG:black="79.998800"/>
        <rdf:li
         xmpG:swatchName="C=0 M=0 Y=0 K=70"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="0.000000"
         xmpG:magenta="0.000000"
         xmpG:yellow="0.000000"
         xmpG:black="69.999700"/>
        <rdf:li
         xmpG:swatchName="C=0 M=0 Y=0 K=60"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="0.000000"
         xmpG:magenta="0.000000"
         xmpG:yellow="0.000000"
         xmpG:black="59.999100"/>
        <rdf:li
         xmpG:swatchName="C=0 M=0 Y=0 K=50"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="0.000000"
         xmpG:magenta="0.000000"
         xmpG:yellow="0.000000"
         xmpG:black="50.000000"/>
        <rdf:li
         xmpG:swatchName="C=0 M=0 Y=0 K=40"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="0.000000"
         xmpG:magenta="0.000000"
         xmpG:yellow="0.000000"
         xmpG:black="39.999400"/>
        <rdf:li
         xmpG:swatchName="C=0 M=0 Y=0 K=30"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="0.000000"
         xmpG:magenta="0.000000"
         xmpG:yellow="0.000000"
         xmpG:black="29.998800"/>
        <rdf:li
         xmpG:swatchName="C=0 M=0 Y=0 K=20"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="0.000000"
         xmpG:magenta="0.000000"
         xmpG:yellow="0.000000"
         xmpG:black="19.999700"/>
        <rdf:li
         xmpG:swatchName="C=0 M=0 Y=0 K=10"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="0.000000"
         xmpG:magenta="0.000000"
         xmpG:yellow="0.000000"
         xmpG:black="9.999100"/>
        <rdf:li
         xmpG:swatchName="C=0 M=0 Y=0 K=5"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="0.000000"
         xmpG:magenta="0.000000"
         xmpG:yellow="0.000000"
         xmpG:black="4.998800"/>
       </rdf:Seq>
      </xmpG:Colorants>
      </rdf:Description>
     </rdf:li>
     <rdf:li>
      <rdf:Description
       xmpG:groupName="Brights"
       xmpG:groupType="1">
      <xmpG:Colorants>
       <rdf:Seq>
        <rdf:li
         xmpG:swatchName="C=0 M=100 Y=100 K=0"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="0.000000"
         xmpG:magenta="100.000000"
         xmpG:yellow="100.000000"
         xmpG:black="0.000000"/>
        <rdf:li
         xmpG:swatchName="C=0 M=75 Y=100 K=0"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="0.000000"
         xmpG:magenta="75.000000"
         xmpG:yellow="100.000000"
         xmpG:black="0.000000"/>
        <rdf:li
         xmpG:swatchName="C=0 M=10 Y=95 K=0"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="0.000000"
         xmpG:magenta="10.000000"
         xmpG:yellow="95.000000"
         xmpG:black="0.000000"/>
        <rdf:li
         xmpG:swatchName="C=85 M=10 Y=100 K=0"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="85.000000"
         xmpG:magenta="10.000000"
         xmpG:yellow="100.000000"
         xmpG:black="0.000000"/>
        <rdf:li
         xmpG:swatchName="C=100 M=90 Y=0 K=0"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="100.000000"
         xmpG:magenta="90.000000"
         xmpG:yellow="0.000000"
         xmpG:black="0.000000"/>
        <rdf:li
         xmpG:swatchName="C=60 M=90 Y=0 K=0"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="60.000000"
         xmpG:magenta="90.000000"
         xmpG:yellow="0.003100"
         xmpG:black="0.003100"/>
       </rdf:Seq>
      </xmpG:Colorants>
      </rdf:Description>
     </rdf:li>
    </rdf:Seq>
   </xmpTPg:SwatchGroups>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[{Catalog} {Doc_Metadata} /Metadata pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
<</PageSize [612 792 ] >> setpagedevice
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginSubsetFont: OUOBAA+Inconsolata Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /OUOBAA+Inconsolata def
/FontInfo 7 dict dup begin
/Notice (Created by Raph Levien using his own tools and FontForge. Copyright 2006 Raph Levien. Released under the SIL Open Font License, http://scripts.sil.org/OFL.) def
/Weight (Medium) def
/ItalicAngle 0 def
/FSType 8 def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
def
/FontBBox {-1 -177 510 835} def
end
systemdict begin
dup /Private
13 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-12 -0 457 467 623 630 665 669] def
/OtherBlues [-172 -167] def
/BlueShift 0 def
/StdHW [63] def
/StdVW [66] def
/StemSnapH [61 63] def
/StemSnapV [64 66] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
1 dict dup begin
/.notdef <1C60D8A8C9B7A73D40> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/YQVXDE+Inconsolata /OUOBAA+Inconsolata findfont ct_VMDictPut
%%EndPageSetup
1 -1 scale 0 -792 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 216.113 li
445.583 216.113 li
445.583 0 li
cp
clp
[1 0 0 1 0 0 ]ct
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 .992 .636 0 cmyk
%ADOBeginSubsetFont: OUOBAA+Inconsolata AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.
systemdict begin
YQVXDE+Inconsolata dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/v <1C60D8A8C9B7A73DB69B83928B08EBEDA655D3662883EB2C0F6EDD129517
5D034660C25F62E4DEF52AB310C2B0A3ABEB09A8CBD8861BFE231624029A9FF5
06051DEBAF1CBFFF0A6DE32552499CA0E3C7540BE0705537393D513225D2E710
E76A91C668D7396AB57354CB12E99BAFF3D5A55D5BDC57CEC36D2667B2ECE30D
0B0F438D588278A50A73C66503C65036429B7AB72C7C2C031F8038A432B4D6C4
619613D002B0723D197BBC89004DDD89309A3C6B89DD9EB87C3709273FE5D9A4
A08EE7A96ED0C832EE6A31B0DB96262FBDE72B440739C5AEE9CF2BDC7825BEF5
E9E40E1599E1B43B70D01CCFC19B00B776DCB168BDE404D1C9AECDB676334B96> |-
/a <1C60D8A8C9B7A73DB1B29E30A55513AC39102599E62B2E4B4AAE8E02F652
53BE14F607BE721631D70607D2DEACD13BE6993CADFB505B37A0BDED2F574E84
CB7C2CBD30C73D07103FC536D723D57DBBCEA3FCD346E3552E1570117586FB35
4695B9D0D757E2FB338AC4385E9CD501431AF21CA1BDD51619F391E6906E58E2
80BFD90F20D7AB2BDCC8FBB50705C6D6B9D26EE4BFB6B981E27E55D26805BC23
9D7CC5521E17F04AE996EFF8B2DC97E1B61080544DE976E4770FB5429F0411A0
E59B01B7B52E13E93D7DEEF53F35C91F99D511AD6F7E9E60D7F8FE4C6BA07C83
5CC0765FAF91136692CB53974AB95C221859D25B59D055DDF18E4D1AD1DB3DD4
2FE0C6495ECD302A3A474CB96E978D0CA388218B33B62D2B67ED282D60BFDF9C
E3966B2DBF80DBF9933AEF66F3B71C099FBDC21FC4008C2F074948FC4E376608
B1DE14BF9E3D7B10963CC5F438967110765B1767C18A7F1609BF9AD2F5208B33
96FC57B94B241FB51C08BB104CFD83407683DE29F67AEF29A14A366626E94365
F72E0EF01B2BA582509A8C51F4B473FFD0504835CC9A7F1C1A16F5DFD92A116E
E95A20318DE46EBFB30E4779759E980B8C11198DE2ED4A4D00793A3B408BCE03
C4FEDC658498C34B2FAB4E066C9BD4EDEC679A85767F51E4AD9039E4BB976A94
3040A22FA9CDECFEF8ACA3C2876DBFFBC36C43065DB89DB7B5D61B4C1A4EC5FB
E5C0F1BF2D32CE200A9C2D4566185298BC9A0277A86C045CD590EC60A8DAD6B5
42F39C3A65A5B532B0243D3E497B9857567F0024646A4329D0B9D6ABB967A437
F9E69A354481A25D83B77671A5E8D21A41C469DFFBF9D7ECCAFA6FA81F51943D
761843FAD4989E1E9D1546F09138B8EB022E5E2C012A573BC83151E1ECD57B99
DC46EEE491CC7693C00DC5497CBC3CA2F5556F281727D8AA0C2B4908A91295D1
F6808707C5E3DA78E9D7A371E1> |-
/r <1C60D8A8C9B7A73DB1B29E350E130F4F5139409313D785E5BAF5A6A5A2E6
59227A68B16D5855491809A96983393064A28329BCB7A66310C2D844B3883555
34D111309586FEB9B78A7F48A7A380C5FE1F3197092979DA808DB252611CEE80
5AFD54BE992D32DC2BF787DA718855DD8284BEE42474EC299F84BE4CD3592712
5945C6401685CDDB824B0E93B560A85C15FB1C56B6893425747CF8C09746D458
BABD03B7A72A73C0A96B54F29BD5974028094A7BB65425CD96E2CC8821B38F06
52098BB3D1F58A47B56EC352B941C862BF973A85F4F805AF5E9E003738C95C29
C77CBD76BC61746CC1FB3408BA7F0CB5FEC459A138CC17D6A4C53E88D3955471
160B89C6210F79FC4676ED48526BA6C81B27146DEE5DB009AC228B5B91A63706
BB662C0944DCCAC2C913A74EC74A4428094A73F752F993E12B7AC4FA47> |-
systemdict /gcheck known {setglobal} if end {end} if
end
YQVXDE+Inconsolata /Encoding get
dup 33 /v put
dup 34 /a put
dup 35 /r put
pop
%ADOEndSubsetFont
/YQVXDE+Inconsolata*1 
[33{/.notdef}rp /v /a /r 220{/.notdef}rp]
YQVXDE+Inconsolata nf
YQVXDE+Inconsolata*1 [12 0 0 -12 0 0 ]msf
259.165 27.4997 mo
(!"#)
[6 6 0 ]xsh
.75 .68 .67 .902 cmyk
%ADOBeginSubsetFont: OUOBAA+Inconsolata AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.
systemdict begin
YQVXDE+Inconsolata dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/space <1C60D8A8C9B7A73D40> |-
systemdict /gcheck known {setglobal} if end {end} if
end
YQVXDE+Inconsolata /Encoding get
dup 36 /space put
pop
%ADOEndSubsetFont
/YQVXDE+Inconsolata*1 
[33{/.notdef}rp /v /a /r /space 219{/.notdef}rp]
YQVXDE+Inconsolata nf
YQVXDE+Inconsolata*1 [12 0 0 -12 0 0 ]msf
277.165 27.4997 mo
($")
[6 0 ]xsh
.656 .583 .571 .374 cmyk
%ADOBeginSubsetFont: OUOBAA+Inconsolata AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.
systemdict begin
YQVXDE+Inconsolata dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/equal <1C60D8A8C9B7A73DB1B29E0223C7B6253D9B1CE4C72766937DC874E3
F9067956FB7CE4EA853E3D9B25AA381F9D58B09B749FAC466A5B9EE6BA8A876B
AA53A300B617AD86BD8ABED8FAE3F7CCBC6827689E5A7E20BE19B61B87776917
A0697BF3158CA9> |-
/zero <1C60D8A8C9B7A73DB1B29E71026F23DDF68F030EE28B58F254E109B19
B2C42E91746D0F09186514311B356E1C4D037FE33C3C3C18E281ECA1CCEC5DB2
47E811359BE064A6384E1E5B8FE744D16FA0C6D46F0A1C41FDF6F864E684A2FD
48BA4956BAA696FF634AB94734473DDF906A3DEC50FAF52DD6A32969E8981578
A0F4174709CBFC051F35B3CF47A3C5EB8A31C8F8A545EC0C0C3C3E4F8269D708
2D16C3CD9173B7752FD538A1CEF302C91AA785361CAE49DD2DBE9814FBE10373
20711357F62EC9B0AAF9B52654CA6400E0C0C44978770DC9715D45FE8F1D1090
B5F929877D92D30D2EC16F493E2ACB5C69DCD0384E5EC25DD01D636AC33A3F38
7AE091DFDFC5D3D9E948DAD7603CF70C1DDCC7694CE4169CC5C2510A0D8E00B4
00463DC89AAA17347145BB3E42A42253E98E7F9DF3B0A270B0C62F68C891DC95
0C1929C01A33901774B664E9B5DD09BCEAC06D983DE33E22B348CC1B6AABEDC9
87BA10596DF1EEF9AE437B7E7A12818F0DDA10F744B00A1A21FF58DCFD9C611C
D10DC8BD7B543FAD23BBE2D0807468422F5EEC1EC9261DC3CFD1576A435F9E70
6933D4CF04EE716D82EBE726A9DD5AE> |-
/semicolon <1C60D8A8C9B7A73DB1B29E64D28E83C0044F391BB5E6BB494C2D
CE4A1351DB1FFD1EADCD48E11FE0F709E77FA06634A0380E6EB8E248CFB8F0FE
FC5A438D6D65C8B7DB4B38C3539A366F01B6247745F1B915D8AFB80F58E77236
B11E3092EE1293AFC99A6634483329AB1F52F3D6AC3001D3A295DAAC6613D065
1126560A1D0AE784B0A2D9E65B8A6CF363E77016B5F7BF6BD2A1D5255C67B69C
0D9B21FA0BE8611857C45DFFF1B7D0F2B6CF7F5D5249180AE960246D5D740179
961AED5C5CEBD2DBCFA5C8DED423BD95A918983F93D3D8CEC1A2730B8B804440
AB22F5D4CC2B910535A039043D96F8170437BEDD1FE2AA9E926E250849D730D7
54B87A046F1127D41A844759E116E6BAF90068FACCC0DE057AB7D02E2F0C99DB
CB4234CCD5E2207227445D040790C5CCD064B76A16FA575CF6EC8BA00493B8A2
ABF96D8ED6848872E7E564675AB39816E3D5C80D62AECC54EBC4F397AA0BEAD6
101D83C4BBF6E56DD76D0E25840D6FDC2DFE3225B590C137E9C57DF39F3E2F1D
E25046C265727E117C8DF6E379436718C38A1DE24CE730BF94A9C31075AEE6BC
0C056E50F8B67BE07DF452201443A6539977100338DD597E9453EE> |-
systemdict /gcheck known {setglobal} if end {end} if
end
YQVXDE+Inconsolata /Encoding get
dup 37 /equal put
dup 38 /zero put
dup 39 /semicolon put
pop
%ADOEndSubsetFont
/YQVXDE+Inconsolata*1 
[33{/.notdef}rp /v /a /r /space /equal /zero /semicolon 
216{/.notdef}rp]
YQVXDE+Inconsolata nf
YQVXDE+Inconsolata*1 [12 0 0 -12 0 0 ]msf
289.165 27.4997 mo
($%$&')
[6 6 6 6 0 ]xsh
0 .992 .636 0 cmyk
YQVXDE+Inconsolata*1 [12 0 0 -12 0 0 ]msf
259.165 41.8997 mo
(!"#)
[6 6 0 ]xsh
.75 .68 .67 .902 cmyk
%ADOBeginSubsetFont: OUOBAA+Inconsolata AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.
systemdict begin
YQVXDE+Inconsolata dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/c <1C60D8A8C9B7A73DB1B29EA1B41481CF3CFAFF0073F62B2E0E18032AD7EF
7014F27ACAC4F996A6428AECADBD66607D2B96661480D0FDE7B3DA10DD87C53E
C5F5214E3DB1509C09E5408EE29A8570586F65E847C5B0D472E7DC7ED94370C4
F2D2493D191B6C6251674942EEE22AC855399FC7DAB339EBC100D8E6E4B64389
FAC61D17968B5936650A170C4CDFB0FEEB762D5A6D86604575AAE3A513B358B5
90FAEC459E54E104DA49A8E0A581F245B4D506899680242B55F0AA6B865383E4
D7B046EFB48CA7743D65C278AF8C9C6CEF3271C10A79657808D58C34912A4C36
B9761644BFF032112A1DCC1011C2F8ED496498ED1EF61B521A5DDBE43F696B77
94EC40DEC57EF43DD590BAA3ABEB3898786A5C2F242EE94EFBFA48546F02D734
08508E3692412308DC0799D75CDDA33E7D9484E2CA9F1CD47BEB65383A45561C
95902509600C2AAC60EF16B9C9E6A63050C922F83950E704D2600B3BC53BB522
3280AE1F49A3> |-
systemdict /gcheck known {setglobal} if end {end} if
end
YQVXDE+Inconsolata /Encoding get
dup 40 /c put
pop
%ADOEndSubsetFont
/YQVXDE+Inconsolata*1 
[33{/.notdef}rp /v /a /r /space /equal /zero /semicolon 
/c 215{/.notdef}rp]
YQVXDE+Inconsolata nf
YQVXDE+Inconsolata*1 [12 0 0 -12 0 0 ]msf
277.165 41.8997 mo
($\()
[6 0 ]xsh
.656 .583 .571 .374 cmyk
%ADOBeginSubsetFont: OUOBAA+Inconsolata AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.
systemdict begin
YQVXDE+Inconsolata dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/g <1C60D8A8C9B7A73DB1B29E224DBCCB41BAA84259A46FE0238A96AD801E96
27A894C2302F7862C04989B4FA85E8B0FF0CF007E4DE87D2A81A7B9F68C13E65
0F86C6884780B678456C89B57F6574D3E3F83FC55737F78E5EA53C3533E4DD26
38B34FF1FC91C47CD2179A00F9D100F9C87FA445D80F0F564690D43829EC7A92
12BF07DB33A4F3090B03792188BAABCD53F05F4D42F79955484491C2AF03B8C7
6FC667B81C91AF85473059CB09FC82EB8EF9FAAABE67A378E3DB3D142FBAFC3F
15B4D20895B1A87CFB7AE39DCD4BA582AB32ED907E0020B8B825AD7168EE01A6
DEE77D5C6F655A2E8524B83E529904A7123CA1F2AE2040DB869B74CFDD4ADBAB
0A54FE6596F4B1FDF591CAC3684618FCB332D9F4A298DC253612175DC5E69EC9
31CB4B3C64E85AEDE0CC381081CAB0E19988DBB678D90C27A6C7C351BA335707
BBBB068271DFA56E318C91458B2CBDE91DABAA761E96B659DDA18150C7F057CE
172E76D07424E3D16292D3D833301A4959C8DCBD4A59340C181782404C44F2FB
7A90F8EB9C1146E1D17B39B05273324A4281643F98AFD7B26F902A20B3EF4F55
F1178B32CAE5D0A28FC91021E2FDE876C327B98067B130D0BD4DB2A633B1F68C
89F7F8E3CDD7CBF23CDE9A76DC4E631D3C844DDBC5CFA9AC2500A459015E373F
1F120618AC9A4F349791BD5909C921E88FC0B2EDE8025378C7F19EE3E3E6FC9F
509F7D8F4B02A278E28245BC2A42B8F857CAE5D0A33F0E363DB0D9AA2E1378A1
FD69BD10ABD50B2D9895942F02492AB94238AE2915B2D7FC86E255371616249B
7E8CBDBFB479570AD285E9439A253FF523CAD01CF01006319937FB9547A52EEC
4F6CF6E84E1B0B6C4E4D7DBE7F1A9D686EC96E85B3297C7F9AFB4B0FD76C6ABE
ECB47D6E0CCB7787B48FF862C3901821E54134CC6B30E7B3F91A029474452BDF
1CBE02069EA8B22459C5FD4AE5BA8864899EC937BAC59428153EA807E0FD843D
EE18CA551C0D656258E3FA88C689DE291AF1B3B23F3E4B71339B6834857B07B9
F1DFE9328B8B67C22194E12A265F2028C6FA560F6A31968C1EA815A8A65F04EF
CA1AB80BE6FB86DEECD9E36BC4E0056EAE36AD30E16794A782AD6FA7972A176B
D76F8F9CE999D2638B1A334057BA700B6BC873644764C6795A06288D3C3D1D47
9A0D90ED82665B2FEC1C267911231EF9DB8CE597A83FD36615CED3F25705B405
6E163978A9E90F13A0E6465390C81582CB874F25046BE58CE3CDD47E8F8E1956
3D806D87FFD0F275AAA64CB491F39BA3EC03C6EBE1900EF368E8773918216E18
01A4AD1487BF5B2651122ACC6610C317475C850DD55C2CEAD7A93DE105F1AD23
C61818694FA188837C06A5767CB1C4E8B746C8EAD13E0DD71D74CF47ED04A754
5C7DEDE9BDE08146F9C32E2E061226EAC55ECBB3628415C6BF8948D2680475ED
B3C0E67C8BFE7AD68FF304CEDC9EB380F25323E4DF7176D265ED12E158FFE2F9
40C5BBF7C9C0F320546BFC4FF96F2D7DCF615B1101FE5840C2EB146A67C787A5
D4233E9BE9E5BC452432635FEE2E1791D8A9DB9ED64309AEBCDDC247B2943FE6
AA5BE046EA0632789A1956FFED0F162B6021B33C8AB7D09CD62AE5255BD50175
08EF604112D5B4C672240CCF586B63E25CFB77ED947759DF191F3AB9AA5ED5F5
849F93828EF60F89201F9125D6B05371159A8F7776B89A9A6BB14806> |-
/e <1C60D8A8C9B7A73DB1B29E763DF861E7D15304C3529A6274F9558507D9A6
E09C770B3CA6E7A1DC655700E5BCAFEA522FB852C78B56D27E3A2D44B97B99EE
D78D99FE2BFA0C5DCA0E6716D9DD7B1F4C8EC21354090F443C9CF7C73E0CD19F
2AD685ACD2F063D9544CEB8CEFFD7DA4F52A38BD9353F81567A8152017BC4816
BC9C44D0358BDF79B636419D5F2B79D81DC8CC5C94F115E5CC178CB0FB15EF55
12C770175CFA916D017F2AEDD7F790EFCA10B3AA0DB7A4ED9C123FB1EDA6F3D6
185A5FD624B83412C863430C6946C3AE75FFCBAB170249052AF8E665D23DB8DB
C44AC74415510693AC6264FBB68D4C82106101ED12D0A82B8EE1C5FDEDFE135E
B0C9701DE8656F8EFAA27A6A1770E10A4C932AD4F98EA43453EE1DA681408AC3
901A26974C3C60D5CF1461E95114D79ABD6022C8B5804A4D7927D8D5A2703534
118E6F6EB9CDF0F149C5941F076AF81BFACB16BD6744F52D5E56074A8A99281A
5881E9753BCC809212EDDF70759B80F1A7C04D0AF07F2D8E1300510737775038
CAA66217718E4EBA1758FE7AA1B365B2D6FDA80D2839CBCC62EC0B9F0BB3AA33> |-
/t <1C60D8A8C9B7A73DB1B29E5ADC86C80886EE655FC0688FA9829614662FA9
D8D9803973F4B7EBF9CE88FC00738EF53681F3BF18930E520B6FCF3C554649BC
ABE382AE7AFED87FCA90B0F305B230599BCA99FF359496C2B506B231D7E99D37
4EEEE6E4729E23D137AA7B0BB8AF04DA02FB86E8997A72582957116EA7E41495
11990B2A2620C46A8D46FE09677E21EC61D65A57EC718059EBF36F28AAA49749
77F251E16CA4FD3AA740C9584F4B8B7E561CC8289D138A3F820C59FFB7BC1FF6
5678601328D7DA243DC770C05EB5B7483ED5DD6B8945B4232560D8554108CF03
CCFA3283F9AD8A451A9A70F61DF96B91EAB7C3B8E1EBF39C18E2F0C59F2E1789
E1F6FEB0C8542D30CF6245E496ECA272804FDD40BC3B78F958C2AC2F9C5F3862
42BD5AE227002345D3ED895DE4FB037898EF45FC75B7CFF9805281ECD736D00F
7550ED2FDC30C49F8A820E86688247186EF61C213519F5910CC47576A4FAE12B
6E22105519C59FD9DBBBCE57914E2492195159105C48F3F89B12B69429CD0F94
D38919FE5C5450CF6D53652713E8193D1A4A26A9B3E03C97647FCF05FCF60F6D
D299D27227560B476ED58703AF370163D679BD9C2E986E2784D5153137F427F7
99D5931A8FDD16BE20A899E725EA3EE86A6ECF48> |-
/parenleft <1C60D8A8C9B7A73DB1B29E1CED2CB3039F69F7549E2A699892C2
2A6E8367A6E54FA71848332339ADCB9BB60520CE998CF42959D733C52C71C4D2
966E8DD84CB03B75401AFE6DDFB16BD9F87883507B73A2B9B6BD9175DAC2B11D
C2BF6EE4348859C68208E16874B2E22ADD88B0DB603F22711C213514B3AD9930
2FBA0B4A49DB4F20E4DDC9870038E3FE423DB1CCDB19478CB7F7B9914AC10C92
7BDEE506EED6B5B1AAF32B6E98CA0C516E257CC36F67254130EF703C432D5DAF
94743EB093E58316291571F3C612B638D19A418068E896D9CECDE0B242840982
8B6BD7C31591E418521AA8252511903AD162C322ADD940A44CA4F30ED26510F0
0CA9F9C644323EC2E7DBF926690AFA03A2103E5C323E5314B3FD22E4F27BFF7E> |-
systemdict /gcheck known {setglobal} if end {end} if
end
YQVXDE+Inconsolata /Encoding get
dup 41 /g put
dup 42 /e put
dup 43 /t put
dup 44 /parenleft put
pop
%ADOEndSubsetFont
/YQVXDE+Inconsolata*1 
[33{/.notdef}rp /v /a /r /space /equal /zero /semicolon 
/c /g /e /t /parenleft 211{/.notdef}rp]
YQVXDE+Inconsolata nf
YQVXDE+Inconsolata*1 [12 0 0 -12 0 0 ]msf
289.165 41.8997 mo
($%$&')
[6 6 6 6 0 ]xsh
259.165 56.2997 mo
(\)*+,)
[6 6 6 0 ]xsh
0 .992 .636 0 cmyk
%ADOBeginSubsetFont: OUOBAA+Inconsolata AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.
systemdict begin
YQVXDE+Inconsolata dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/greater <1C60D8A8C9B7A73DB1B29E03FFC7A512D51B0F0FD4525A1FB25714
DBD5F35B79D7C52EB47F59D0CB4E826F5479A65C1F910AB3ADFE64A57FEF5D64
71041E1DFED53D4AEA3036A364B0AFAEF38CAAD99C3236B426DB6F6EDF26CE73
F9A3DC00BF34EEB874A597723AF399241D8D313E6C23> |-
systemdict /gcheck known {setglobal} if end {end} if
end
YQVXDE+Inconsolata /Encoding get
dup 45 /greater put
pop
%ADOEndSubsetFont
/YQVXDE+Inconsolata*1 
[33{/.notdef}rp /v /a /r /space /equal /zero /semicolon 
/c /g /e /t /parenleft /greater 210{/.notdef}rp]
YQVXDE+Inconsolata nf
YQVXDE+Inconsolata*1 [12 0 0 -12 0 0 ]msf
283.165 56.2997 mo
(--)
[6 0 ]xsh
.656 .583 .571 .374 cmyk
%ADOBeginSubsetFont: OUOBAA+Inconsolata AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.
systemdict begin
YQVXDE+Inconsolata dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/o <1C60D8A8C9B7A73DB1B29EA0ABF0457ED2A9553D23AFF6AC4A3A25EC5415
7D81AAEDC2A5EC8798B52F49136ADBDDE50771D0ADB7F6B9E973BABA3EB95C0F
27EC5DC6835305C32B54B2A814E892B6A3A377868F98AF75854894379F72CC09
6F2AAA86A3F222B37EFF105D16935F39C9E838C17270800621A51C29347A8792
22A3524EE731F5DCC0AD9E7D3B3046E58CDD8CC1329C249D5C2DFE3DD287E68D
E0D39BC7D13EFC56950F96496248AEDD908BFFC0260E859364F1866D0CB22D97
994E36CBDB36AEBC657BE468209CA41190E15973E51595EDC31BE5B4D39E16CA
2ABD8110521CE069F25EC9FCE3D830FD253B72F5114DE92592A5EFA58B62117C
976A9430BFC5B0C0E6393DB5B7770820BAF350C86884BC719EC370C58B694EF0
90C044BD7E6BE32795C2329D0918AECE06E014706F8356> |-
/n <1C60D8A8C9B7A73DB1B29E09F2A40911224EA7A754B932AB4FEB122EE3E5
A055554DEA944B1842FC8FC3404563DEAE5262A04037FB768A2028D466392BD7
CA51A552C769B86D8C7DADDF4A8C7550FD500249B26930C2415B6141AA5A4AEB
BC1C7EDBA63F7668F7249D1A80EA508868E454FF1E1994833F9A4DE7F1F69BD4
7B381D3CEF14C035013C34A61204C84AB9E27D2DD48A178757AF98BDB8050E06
4E565977A4D6B7842EFB38E620CE1FFFF319DF3E90FA0F47F999094946999A64
802FDA00A6B9150CF27B7E56800D05B806D7B9FCB4A6CBF992A5B48820CB7B1F
D33BC9E85C33A2A6A28057492717AEE943EA6211D6EEA10E579D84A319F15E7F
15409B3D37D783F9B171BA668ADD8024670806DDA4A33A1234053271CF126FE4
77D4E5D4913B28A7E6D221B0D2039B4E4764482488B49A934785886FE50EE3C1
7A68D255716451BE0B7783ADEEC6BF88170AEFEB8974093E5289D6> |-
/R <1C60D8A8C9B7A73DB1B29E060CE93453C8DE58E020527861052EC923F987
5E89C049FC255983CAB9E830F594BC5214C2091688CA0650A3E6F02162E13805
9ABF317C223C1D4233A4C268B7A800025ABBA74A97DD94CCC899BD18A79F7969
395B4EA7EA7CB7B637EDF2E1483FADAB1486B17466A79C62AA1EACC23C2CE1EB
48584FDE83A0B667DBF176CCC16A1408608E34813B806FA0364E9D8CF6A15899
014C451436A9E7AA50FFCDB6153E4DB144C8B0B01899C5D675F54B3896A162F2
78E1ADE2E7E36024B14179F56422B69CFD5FA60C5736C244EAA0BBA87C76DA0E
5892EF6B8572D8869D543CD30D5675E1D6F327E6D3892FBC54321895F755D692
D513C95F6A433B208602979B8CE62294ADADEEE3EE2228CCF0BFA1BF51B63FD8
5949652C642498E60B5EE1299235F970ABFCE79669D74BBB84A8D70AC0CB95D1
DC3A97112BF163DC52F1B978D00FABB6DC0EEC833AD32E8A6804AD68508CFDB0
F305B6F48955BD713CC5316CB943F3684B7BCCBFB5132A0D909D76C84C3E13A5
4007D74E0A196489E2B0523E36A545ED8038F3390F4BB3F17F8E58CAE9986640
D8> |-
/q <1C60D8A8C9B7A73DB1B29E821AF4FC29787A65DA2A41425561AA1158449A
11D932E241BE6218C15328FB0BAFA5B71AEEF43F886DD6D8FC61543BD343F43B
A578C452C9E5A44782AE6C873631EEF31FCF0C1C97A1A6E1B253F557F2C5D69E
6EA81F2B8130DB1026B3147B496A29731F15248AB46DBFE2E7E3711CC30A8D1D
06912D40DBBFDED6BCE156815E3DE51BDE5D5591D87DA01620B812EC92BA6F09
2E17D9EDC1F1303C67E5712054D8BD346712695707DA78861848A75B0EBC1442
1C6F8B33684810C18D54387CE44CF96D2FAFA2853889E549037BA59049722701
9138AD7D65ECA12224FAB0C007E5BF1AC77D1643163FA5A68548D6B841B528E1
D93EE1EB220A01D033374A47C1533E0B2B2109D934C53126A47E886135434F71
EFFA4BE3941936851369869F83D567355EA9CF690B546626671D85350CFB3B24
5CFC3CB861EAA008B57FAFD4903BEBEB10596FFA85932EA0AFACC4F353D115F3
2AF67B8497856065DAA81B8E92554B6282358C3B26F977BEFBBEA54358F0FAC9
C18E1E100164DBD8C02C0A7171B39D455BAB4E34EF66506ADAB670EB6DB533AB
6A3830E4EBC820F4C57CF3741AE31FEC42> |-
/parenright <1C60D8A8C9B7A73DB1B29E0DDD2913F2CBF2058542BDC44FE50
24D00397709205CA0A9AACDEABC61566DE8917FD37CE92FACC14CFA7621EF10D
21442CEDB20AFCEC295F67B577CA53772E8B63CE80A4E81219716C6327B1096C
41C496DA4E97DAAA7F767F03C427456FA218893E1511C7E65E9E9AF1D556AFF9
92375438826D7099FB43E5100A5BD02C9F40DA12155E7AEDBEF93E09E66DAB51
738E4D2AB8C79A17A0A934F84C6611AF6703116AE6440B06240EAABAAE64FF08
E22784D13D861A160BE68E1F540C0864A8F26F678200D5B> |-
systemdict /gcheck known {setglobal} if end {end} if
end
YQVXDE+Inconsolata /Encoding get
dup 46 /o put
dup 47 /n put
dup 48 /R put
dup 49 /q put
dup 50 /parenright put
pop
%ADOEndSubsetFont
/YQVXDE+Inconsolata*1 
[33{/.notdef}rp /v /a /r /space /equal /zero /semicolon 
/c /g /e /t /parenleft /greater /o /n 
/R /q /parenright 205{/.notdef}rp]
YQVXDE+Inconsolata nf
YQVXDE+Inconsolata*1 [12 0 0 -12 0 0 ]msf
295.165 56.2997 mo
($./0*12')
[6 6 6 6 6 6 6 0 ]xsh
.25 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
371.793 62.027 mo
249.747 62.027 li
249.747 15 li
371.793 15 li
cp
0 0 0 1 cmyk
@
371.793 115.07 mo
249.747 115.07 li
249.747 84.009 li
371.793 84.009 li
cp
@
371.793 173.113 mo
249.747 173.113 li
249.747 140.052 li
371.793 140.052 li
cp
@
371.793 213.156 mo
249.747 213.156 li
249.747 194.095 li
371.793 194.095 li
cp
@
gsave
0 0 mo
445.583 0 li
445.583 216.113 li
0 216.113 li
cp
clp
.5 lw
1 lc
445.583 215.5 mo
445.583 215.5 li
@
[0 2.003 ] 0 dsh
443.58 215.5 mo
248.241 215.5 li
@
[] 0 dsh
247.24 215.5 mo
247.24 215.5 li
@
grestore
.5 lw
1 lc
[0 1.992 ] 0 dsh
247.24 213.508 mo
247.24 126.854 li
@
[] 0 dsh
247.24 125.858 mo
247.24 125.858 li
@
[0 2.003 ] 0 dsh
249.243 125.858 mo
444.582 125.858 li
@
gsave
0 0 mo
445.583 0 li
445.583 216.113 li
0 216.113 li
cp
clp
[] 0 dsh
445.583 125.858 mo
445.583 125.858 li
@
[0 1.992 ] 0 dsh
445.583 127.85 mo
445.583 214.504 li
@
grestore
0 .992 .636 0 cmyk
YQVXDE+Inconsolata*1 [12 0 0 -12 0 0 ]msf
12.1655 23.4997 mo
(!"#)
[6 6 0 ]xsh
.75 .68 .67 .902 cmyk
YQVXDE+Inconsolata*1 [12 0 0 -12 0 0 ]msf
30.1655 23.4997 mo
($")
[6 0 ]xsh
.656 .583 .571 .374 cmyk
YQVXDE+Inconsolata*1 [12 0 0 -12 0 0 ]msf
42.1655 23.4997 mo
($%$&')
[6 6 6 6 0 ]xsh
0 .992 .636 0 cmyk
YQVXDE+Inconsolata*1 [12 0 0 -12 0 0 ]msf
12.1655 37.8997 mo
(!"#)
[6 6 0 ]xsh
.75 .68 .67 .902 cmyk
YQVXDE+Inconsolata*1 [12 0 0 -12 0 0 ]msf
30.1655 37.8997 mo
($\()
[6 0 ]xsh
.656 .583 .571 .374 cmyk
YQVXDE+Inconsolata*1 [12 0 0 -12 0 0 ]msf
42.1655 37.8997 mo
($%$&')
[6 6 6 6 0 ]xsh
.311 .247 .252 0 cmyk
YQVXDE+Inconsolata*1 [12 0 0 -12 0 0 ]msf
12.1655 66.6997 mo
(\)*+,)
[6 6 6 0 ]xsh
.495 .411 .411 .051 cmyk
%ADOBeginSubsetFont: OUOBAA+Inconsolata AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.
systemdict begin
YQVXDE+Inconsolata dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/f <1C60D8A8C9B7A73DB1B29E95192D6C3E378E7D6093FEE30FF3C206300419
30E1B0F6A7A88CC84E37C5E4FEF7DD8A796CF363E670A030FD2B7573CC658BE1
71D4260FAB8CC749E8CC73ACE295BEE741F7ACF06FB9C74F6C71594C913D82B9
FF8EDC3C867DDB762A32CD7E246948E09F96C34F9972143EBBBAEB1535D32577
1FED1A54A43A2D06C3E4F6BA068C2B47466A7CDE6106C94B3D0AD676687B9576
C22106C56959A4602CB8FBF36DECD508C83F3EB2806B31BCB279F89BAD5471EB
85BDD97B8201038BEB61EE138C8D74A28D8FD308652FD709C07E6BB0571ED81D
57B63F396B2D52EFAB2252F3F6EF021679F27B232CECE49712229ABB1FE952DF
76DE91488C640AD0805493D80CC04C0296DB78E5555EEB77EB354A27E380005C
6F549D1EE1ECD50F7B85F234C328F02EC07549885EF332553E52D485EB147E89
B883635646915C72D3F82F8FB09C8F968F3CB7679C7FA2DA28C93CD3AAD9662A
833662FB7E4B273786CB26F66E9715549F4CC33B733FD0165C0FA35C2518338F
9EA8BBECF1299664112C0B23CA5EE4D1D7FBC18E6F41A131B0DCDD734113C48C
8E79ECE960CB34680BBA54AD2B5005EDB9A6E9524AF6E01C0F98B49C> |-
/u <1C60D8A8C9B7A73DB783C3F0B7CF8C158C4E676AF893D4AAFF249B46B7DC
C80DA38F0C69526D9260A871BFCE6DF01132E15B4FDAF8F66DE0DA375318650F
E06C90977BA8D52670D6F0C90BC49FFE4C9CCDC7014AC6DEED8E41265F9DB121
035C94BB3ABEBD016C524314525364A1AAFB6F41A651A5AB78A26D0B1A95C107
4AED435CB7E0BD2C49D64E2F620F7B6D378C68E6EA8463564666FF27F2B7060B
8C245F9E6FB1ECEDF58802243AD3CDD2DBB7E3737F79958039D285E31DBCAD9D
66AA6F48FF5FA0592D744D07C1D4626B1AAB59C0348E1C930413FEF2DA5ACBD2
E7666E0C3C49B7FCF6EA09C1B3A17AB7D51F568C35D00EFA8A2524F60B628846
A68D18D756EFD86EE2A8C9D8588D471B7478565C765FE37DDBB491FEB216025F
08981914781BD6EA30F973D051D85AD852C2DEBCB6BE9E3271C3BEC75A3EF871
D68D3C84022C2D2FAFEA656D0EFCF156D45F0288AFE7FC963CAA7705301C08B1
5D27D2278B7147DD49DBC65A8237B749E7E191D218AA5929E17CE7D355892FCD
2A9A2324847745868ECA822F91CA2F6AC5FA427B40142E7A797E745F358E7B23
43FEBB4C63A64B1DECD7953ED7B6453C0CF0092F0F151FD29CBFABCD06470755
053D31B591> |-
/i <1C60D8A8C9B7A73DB1B29E3AA41B135239A57B34653AA08A2D1E449010E4
F808FEA6D7F4DEC6D13F4483C26CCFD70CD409351ED5D5AFFF5C307BE634A075
E3ED5E9EE7D2478C7D8580D47EE78AA7C1FFD3819DD3D042D66B0DE3CF78AC15
AF0C2899660576E7E2AA343A1F2B9ED4F6B0C6B38014C1036BEFFFB508DB2AED
63FDF6C5EDF76748F22683632D138E9B2D8FE2F12B12AD5EC22934FE573072F9
0C83E40A2B91A9AEF794C73A33D0BF15584CD766A1E53370129C0B9D760F6309
8CB4883B16005DB3C113F1EE2455FE849BDC34C1D0B908A01A31D51D69B4F307
CD4BAA2FEAED6E61D17CBBF59C2A7F6775DE5F6316D09051651F9BE62D4A8C35
3B> |-
systemdict /gcheck known {setglobal} if end {end} if
end
YQVXDE+Inconsolata /Encoding get
dup 51 /f put
dup 52 /u put
dup 53 /i put
pop
%ADOEndSubsetFont
/YQVXDE+Inconsolata*1 
[33{/.notdef}rp /v /a /r /space /equal /zero /semicolon 
/c /g /e /t /parenleft /greater /o /n 
/R /q /parenright /f /u /i 202{/.notdef}rp]
YQVXDE+Inconsolata nf
YQVXDE+Inconsolata*1 [12 0 0 -12 0 0 ]msf
36.1655 66.6997 mo
(34/\(+5./$)
[6 6 6 6 6 6 6 6 0 ]xsh
.311 .247 .252 0 cmyk
%ADOBeginSubsetFont: OUOBAA+Inconsolata AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.
systemdict begin
YQVXDE+Inconsolata dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/braceleft <1C60D8A8C9B7A73DB1B29E072414229EFB5AFC0880DE2017C02F
06B09BE69677E78D1FB5713AFF0C05993768F9825F0FF8D31C52BEE4F71E11A0
34CBCAC1003308D150FA31907795B866370281C72943A0CB9F88F609A91E8C5E
72C8026F64DBC2E18977965C654E58B42B8B929AABE9262799C86E62584CDECE
B1DBF5D65461D7E3B9F9F267E57BD0E59A68DA68B121EF8F86640C781AE7D59C
D54B756799548CDFAEC5ECC0DCAC02383A3A33A83F251214CEEDCE17C0C7C938
9F48A9B265B9C11B651990403795D89D21C9E6FB0AE1E1882E7390444A5E0F2F
105B982BD844B7994654C7955F78E99AC576227CE883A0954E09C88BC68FD3CB
AD17B2D3D89FD51CE2AC9E5814142FD3CC826F022D49B37FE8ED8281570CB110
DE342A946AE59C6FB68594AA096FD3033BA7936CC540E947C00FCDA54993CDEA
03C57E6BC0719DCB74F029EC39C3B9526728E1A568855A0D1465AA83E81571B8
A175FE55007D3D7055A20F729083C068D54EB386B4EB6B88C897514CA83C911F
E481D81EDF77CD840FB28B42334F86FC7FCFA6E6520C6B1C489FCFDEA5C7A56B
7E6DB5EB2E69F945E86D177BF19F3EEC49952FBC61566B934569E12DBB27BFF2
DC83CFCAD1F0D2B81C702C032FB869668DD85442154EB90B0CB06D57267D5DAD
6D1331F34F83BB670F19FAFFA9AC580A25BD056D933A76AE784C11E78FC5FBF7
A4296DB0847EE3D48D5AABB2DA5AB24E09197ABCDD3D1C5268A59AE226793F61
8F66CF1A966669393787322FC6449A722896AF53F26AF45708A2F4A0BD23B3E2
0CBA019CFF3759486523A60481177CAE97DCE5FE4BAA66138CDED9291654D57A
15B1BC84A75268CCD25F9A3090AEDD29E7FC156B7FB38337A2CADD516B4D7D7E
4AA6E944905B399C0615956E9F7CD6DC40DE539260A8EB4552479A606633FCB8
28313547BF778B6F54793BD77B919F151BA987C45E9F2E381662C0BD7D9D6097
6B0D2DCEE47471027BB20EB554E748C7D18AF76BE5139EF8EF7F3218CD1A031D
0D6C5B6A3B8AE501E174E554FFDABAE5D661ABBB15EB656E8D9FCAF1F2D8D00D
27B0434D8723ED86746E0EEDCA4B5C5617B471D16DFB3747833D45C66499C50E
844B66C31B> |-
systemdict /gcheck known {setglobal} if end {end} if
end
YQVXDE+Inconsolata /Encoding get
dup 54 /braceleft put
pop
%ADOEndSubsetFont
/YQVXDE+Inconsolata*1 
[33{/.notdef}rp /v /a /r /space /equal /zero /semicolon 
/c /g /e /t /parenleft /greater /o /n 
/R /q /parenright /f /u /i /braceleft 201{/.notdef}rp]
YQVXDE+Inconsolata nf
YQVXDE+Inconsolata*1 [12 0 0 -12 0 0 ]msf
90.1655 66.6997 mo
(./0*1,#*12$6)
[6 6 6 6 6 6 6 6 6 6 6 0 
]xsh
.75 .68 .67 .902 cmyk
YQVXDE+Inconsolata*1 [12 0 0 -12 0 0 ]msf
12.1655 91.0957 mo
($$)
[6 0 ]xsh
0 .992 .636 0 cmyk
YQVXDE+Inconsolata*1 [12 0 0 -12 0 0 ]msf
24.1655 91.0957 mo
(!"#)
[6 6 0 ]xsh
.75 .68 .67 .902 cmyk
%ADOBeginSubsetFont: OUOBAA+Inconsolata AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.
systemdict begin
YQVXDE+Inconsolata dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/b <1C60D8A8C9B7A73DB1B29E040BEC83AB867B2586C35A251E6257FDE48EA3
3B2A91C07084853921320CDCB7F1EDE0BC556A6024A75B4FAF3209DEC35D2C7E
35BA2E180A356EB367FA9D01F2964DAFE5E36C5046CD40435F0D1F06D43E595C
FE4FA12AF119C6BB324FE276DA2CA41195167F967F90E37738BFD57B0696278F
F95AAE8B80CDBA337F90764BECFCFDECDF1E0350789AB9D0B1C5B23CB1E474C7
E5F410CF75022A89281666ED20E199F883BF2C3EA6B2F6FDFEF149514AEEC439
0534A17E0D982B1CC2ACF6BAE0EC9B88597AF94D9624C9B7EE7B85E5CB2352D6
6A1DE98960C6F5D217CBB1E1EFCBBAE5D7B7E1FF24A8685CE6105D8518A634A4
A98715FA95942409C16EF7794BAAEE0D9C78A128991FEC28D364B650BC9E9A96
52589FC5A08AC9D95D051E4A67FE748ADE31336E0636D33AB49810347DD9E5D8
065DB8A227AE86BD130DBCEBED250A6C63E0CA82AF150F9E5D8A7B96ED84593D
1E7C8123FCE5C81E74F280510AB7446CA24F172B93715387AC2018A9D5214442
A7753C2F9BC8F157E9CB887EE780D266FF615B82840645BE3096BB1D6EFD41C6
8C238168E78A7650719423D41C24146DFF784A61AD4752D0AB4F4CE03C5E006E
24A866DCA799C18E1934A053888572D4F1F47F04D6D71B0434AA653DF03DBB2F
822DE2C113D89D3A49528796DF9171BA10D3F1B231D4EA56700C417E81DE> |-
systemdict /gcheck known {setglobal} if end {end} if
end
YQVXDE+Inconsolata /Encoding get
dup 55 /b put
pop
%ADOEndSubsetFont
/YQVXDE+Inconsolata*1 
[33{/.notdef}rp /v /a /r /space /equal /zero /semicolon 
/c /g /e /t /parenleft /greater /o /n 
/R /q /parenright /f /u /i /braceleft /b 
200{/.notdef}rp]
YQVXDE+Inconsolata nf
YQVXDE+Inconsolata*1 [12 0 0 -12 0 0 ]msf
42.1655 91.0957 mo
($7)
[6 0 ]xsh
.656 .583 .571 .374 cmyk
YQVXDE+Inconsolata*1 [12 0 0 -12 0 0 ]msf
54.1655 91.0957 mo
($%$)
[6 6 0 ]xsh
.75 .68 .67 .902 cmyk
%ADOBeginSubsetFont: OUOBAA+Inconsolata AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.
systemdict begin
YQVXDE+Inconsolata dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/period <1C60D8A8C9B7A73DB1B29E67521573005E21C99AB70567CB43CC36C
28841CF41B623341E558C23315FF2B0ADE28BBAD9BA97C874EF9690F2AFB1A08
69E45BFE10C4628C65DF5E3435765F245FB4A9BB405CC6508BB9580DE10755EA
717CA46D7698C0AB88B0312C75B2C6BC0E28782A9D243FAFEB16BF8519BEBED8
EE10CDEFB8B3E84A3F0202DDD633172E6920D104AECA8E9F7696C572248DD865
A1C891E> |-
systemdict /gcheck known {setglobal} if end {end} if
end
YQVXDE+Inconsolata /Encoding get
dup 56 /period put
pop
%ADOEndSubsetFont
/YQVXDE+Inconsolata*1 
[33{/.notdef}rp /v /a /r /space /equal /zero /semicolon 
/c /g /e /t /parenleft /greater /o /n 
/R /q /parenright /f /u /i /braceleft /b 
/period 199{/.notdef}rp]
YQVXDE+Inconsolata nf
YQVXDE+Inconsolata*1 [12 0 0 -12 0 0 ]msf
72.1655 91.0957 mo
(#*18\(.4/+')
[6 6 6 6 6 6 6 6 6 0 ]xsh
12.1655 105.496 mo
($$)
[6 0 ]xsh
.311 .247 .252 0 cmyk
%ADOBeginSubsetFont: OUOBAA+Inconsolata AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.
systemdict begin
YQVXDE+Inconsolata dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/d <1C60D8A8C9B7A73DB1B29E83458D022C241F03D3B5EC1FECC3E71E48D061
8C0CCEDB62DD8D55C0AC627225DE4D2C1687BFDD081F68C27031FEA01B649FFB
9B47629D75EBDBD71143F7B33DE2E3BBCE69F345CDDE19D43C01A71DC9546B58
C2DF86EDFDCF49B2F606F361954395647E4915C1EA5030FD33276668AA6F33E7
1D0B934C8E4F964FA09AE89F3E87438616E959CF64584D1ECCCD504DD51C625F
E150088B68B78488B2F91C0EE3C1B6D4BEAF9B53024D807F548B50C521AAF349
755B47C9D935AA2C97FF2B401B6F693EE11245C83359D561A9C875AC3CFB6B8C
731ED61DCA018321F88EA8E548B10BD44C58594ACF21AEE1D189BF50E000D531
DF950F4E97D3188CAE76901C93372B04E84DD55F605CC70AE7DF0CF33FB3AA4C
6CE9E5ED48580670F9A1AC3DAB7B4ACDD33C5C630E5C02D11C4687C4A9EE1119
C1E064EAC61E80B99C3FA46DD489C2C2EA5FD25CDDAC09720B64207DB5E23CDB
8A005A8DF4F760A67594D2460299551DB71C956305545C0B9BD44054A5EF17E4
5855FA8EA9F69A65AB44C11051D2A786BA4114AB235ABC6EFAC87F17977E33ED
7DB311E5A459DDD7D84D1E89A2BDC683B4F3EC8FE1B8A63122B0695A630400C3
AC48CE71E27128F077F4D30405FB1217445B3779C77B96B656835E3165E94E6E
727D85BB76106C5942116AE1230B171ED610178D517721593C84804C5AC6D60A
45A4B4967D3AA7D1F4377AA78113D1DF66F0604E0F0FAD784EF0A0BD33BD094D
2F7CCCEC3133A99FBC7599F80A7A1541EF> |-
systemdict /gcheck known {setglobal} if end {end} if
end
YQVXDE+Inconsolata /Encoding get
dup 57 /d put
pop
%ADOEndSubsetFont
/YQVXDE+Inconsolata*1 
[33{/.notdef}rp /v /a /r /space /equal /zero /semicolon 
/c /g /e /t /parenleft /greater /o /n 
/R /q /parenright /f /u /i /braceleft /b 
/period /d 198{/.notdef}rp]
YQVXDE+Inconsolata nf
YQVXDE+Inconsolata*1 [12 0 0 -12 0 0 ]msf
24.1655 105.496 mo
(#*"9,)
[6 6 6 6 0 ]xsh
.495 .411 .411 .051 cmyk
YQVXDE+Inconsolata*1 [12 0 0 -12 0 0 ]msf
54.1655 105.496 mo
(34/\(+5./$)
[6 6 6 6 6 6 6 6 0 ]xsh
.311 .247 .252 0 cmyk
YQVXDE+Inconsolata*1 [12 0 0 -12 0 0 ]msf
108.165 105.496 mo
("99,!2$6)
[6 6 6 6 6 6 6 0 ]xsh
.75 .68 .67 .902 cmyk
YQVXDE+Inconsolata*1 [12 0 0 -12 0 0 ]msf
12.1655 129.892 mo
($$$$")
[6 6 6 6 0 ]xsh
.656 .583 .571 .374 cmyk
%ADOBeginSubsetFont: OUOBAA+Inconsolata AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.
systemdict begin
YQVXDE+Inconsolata dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/plus <1C60D8A8C9B7A73DB1B29E4511E1B50AFA56F31A94647FB8D7B24BD47
722F41A194CAC7F371EB573A60F7A8962578F0B78DB554071F4B1840970B4128
05A6B07A556569E302ADC47D59309E45EBE972B695B1DEDF4D639B75FEFD0F6A
D7DDAC6983B100093332DA6A1C862E8E3CD6AB4BBFC0F8BF06AF831B07FF3> |-
systemdict /gcheck known {setglobal} if end {end} if
end
YQVXDE+Inconsolata /Encoding get
dup 58 /plus put
pop
%ADOEndSubsetFont
/YQVXDE+Inconsolata*1 
[33{/.notdef}rp /v /a /r /space /equal /zero /semicolon 
/c /g /e /t /parenleft /greater /o /n 
/R /q /parenright /f /u /i /braceleft /b 
/period /d /plus 197{/.notdef}rp]
YQVXDE+Inconsolata nf
YQVXDE+Inconsolata*1 [12 0 0 -12 0 0 ]msf
42.1655 129.892 mo
($:%$)
[6 6 6 0 ]xsh
.75 .68 .67 .902 cmyk
YQVXDE+Inconsolata*1 [12 0 0 -12 0 0 ]msf
66.1655 129.892 mo
(7)sh
.656 .583 .571 .374 cmyk
YQVXDE+Inconsolata*1 [12 0 0 -12 0 0 ]msf
72.1655 129.892 mo
($:$)
[6 6 0 ]xsh
.75 .68 .67 .902 cmyk
YQVXDE+Inconsolata*1 [12 0 0 -12 0 0 ]msf
90.1655 129.892 mo
(\($:$!')
[6 6 6 6 6 0 ]xsh
12.1655 144.292 mo
($$$$)
[6 6 6 0 ]xsh
.311 .247 .252 0 cmyk
%ADOBeginSubsetFont: OUOBAA+Inconsolata AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.
systemdict begin
YQVXDE+Inconsolata dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/p <1C60D8A8C9B7A73DB1B29E040BEC83AB867B2405DE800C6180C9A2936EFD
01D910553EBD0B76632C972CCEB9E488BB26B33F7788E2B50B265347DA2EC77A
44032FF8F07136A180F563433913AA6D527C4C907BE3249836857C03E974C2A3
6FD9EC687B40EBBDC5793896EEBE8222318FDA91B82C9888190B3D79646DC66D
6FFAD2A6CB5799BA3A05D4AD390F092CC3065CF96744A914ED4E30DAD4648F3E
DE12802BEAEA33CA5136D9E1F2D5C4614848BBD8D89A74BFB02A8D44E7E5E17F
46A3F73012E6426A53375B79B1BF937F8364209F25A5E1EB4C02C21B11D55514
61BD871E664044AEF0D78241782145051044BDAE8238D7E54260E5A72A0BA5E3
C7C83889736E82929B835F8DDD3082D7B639506D4354E53520A119794B389CC3
5CDF7878926CF54E40593E662823E097450A04023D6F216B804AFFC42A204199
1C35417DFE38CF46152BB23BDEA77192A75B903F4890DA39893737E1D0D0405E
BCB89E1537B2B891D8C38562C1682F174EC4CBED2C1BB0170C8FE198A3A967D2
7BC883579E65C37E2B1BDC5BBD84FCA5181C9CDAABFDF98B7DACADF49A3D0802
1995C198A7AE8E7DB7924D5FF533BFF7F6200A512971D468> |-
/comma <1C60D8A8C9B7A73DB1B29E64D28E83C0044F391BB5E6BB494C2DCE4A
1351DB1FFD1EADCD48E11FE0F709E77FA06634A0380E6EB8E248CFB8F0FEFC5A
438D6D65C8B7DB4B38C3539A366F01B6247745F1B915D8AFB80F58E77236B11E
3092EE1293AFC99A6634483329AB1F52F3D6AC3001D3A295DAAC6613D0651126
560A1D0AE784B0A2D9E65B8A6CF363E77016B5F7BF6BD2A1D5255C67B69C0D9B
21FA0BE8611857C45DFFF1B7D0F2B6CF7F5D5249180AE960246D5D740179961A
ED5C5CEBD2DBCFA5C8DED423BD95A918983F93D3D8CEC1A2730B8B804440AB22
F5D4CC2B910535A039043D96F8170437BEDD1FE2AA9E926E250849D730D754B8
7A046F1127D41A844759E116E6BAF90068FACCC0DE057AB7D02E2F0C99DBCB42
34CCD5E2207215> |-
systemdict /gcheck known {setglobal} if end {end} if
end
YQVXDE+Inconsolata /Encoding get
dup 59 /p put
dup 60 /comma put
pop
%ADOEndSubsetFont
/YQVXDE+Inconsolata*1 
[33{/.notdef}rp /v /a /r /space /equal /zero /semicolon 
/c /g /e /t /parenleft /greater /o /n 
/R /q /parenright /f /u /i /braceleft /b 
/period /d /plus /p /comma 195{/.notdef}rp]
YQVXDE+Inconsolata nf
YQVXDE+Inconsolata*1 [12 0 0 -12 0 0 ]msf
36.1655 144.292 mo
(4;9"+*,"<$)
[6 6 6 6 6 6 6 6 6 0 ]xsh
.495 .411 .411 .051 cmyk
YQVXDE+Inconsolata*1 [12 0 0 -12 0 0 ]msf
96.1655 144.292 mo
(34/\(+5./$)
[6 6 6 6 6 6 6 6 0 ]xsh
.311 .247 .252 0 cmyk
YQVXDE+Inconsolata*1 [12 0 0 -12 0 0 ]msf
150.165 144.292 mo
(*/9,4;9+2$6)
[6 6 6 6 6 6 6 6 6 6 0 ]xsh
.75 .68 .67 .902 cmyk
YQVXDE+Inconsolata*1 [12 0 0 -12 0 0 ]msf
12.1655 168.688 mo
($$$$$$\($%$4;9+')
[6 6 6 6 6 6 6 6 6 6 6 6 
6 6 0 ]xsh
.311 .247 .252 0 cmyk
%ADOBeginSubsetFont: OUOBAA+Inconsolata AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.
systemdict begin
YQVXDE+Inconsolata dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/braceright <1C60D8A8C9B7A73DB1B29E02D477F67047D24B77B3235F9CF0F
7E444D42C50A3C2331533431AE2B836A7769299DF533EEF76A8E605F10563A35
B450439688AE9AABC80B641999347DC36D156382275520A65F9EDAF51AC470AA
7118FFD4D1649A31FE30D1F0DF3ABBB8CFACD55E94543659A8A99AF17D945B4C
665A4FEBEDD32462F60C52CC2D154A844B625CFB8F96D9D44AF8477BAFB84FBD
96DBE3B0AC0104109E3C377EC7C29DE59FD540BDF0D79D1BFE1276A7815F1AE9
410B4DE64E8AB82C9121DCDC37747F142DBBCF5830DDB893CCE52EC91E8AC837
EBC3F5AA6E2974A0BF4BE138BF7039791815607A947F6E0244C0D70B451857EA
169459D297721C11BB5BD999BC1CDD3BEFD8631365EC855A57926E2F8208BE16
C171BCD11E037168F2F5E1DB1B75EE676E67ADB0732792531B56AFBAF4FA9431
D7DD47C1FF1EF91B465C9363BCF270CD03253CCAA330F25ADDCE75DE9AA859F9
B3343758B59BFF3DEC74A4BBBB45FC9FD62D8E11CE9884045CEC39C343A3609A
AF8EEA2A1A704B2C69D7F912F0808ED6D2E24A37E002373E06EF0C2BF72BD66A
71EE31CE13238280480B94573DE845C117D4B98F90AC0B5EDE61A610D33665FD
90D09524A7DEC05C7665727B72EB3A63A8738D37C4735A47232C184C63695826
5B7FE878341F769553D61330AB68BF11B214C4D9E3F7F1A66D37A60B211FAF92
AD3C29D8B948562C19C021348AB9E3693374769320A2368CA5283589BE242E92
30716449B9D6334E9C76582F7C7D4A2202A95CD2A9674FFF4139492BD8600089
A847AD1020B643C6FDEE06BA4C6B7B53FF74E8067435160109CC57B716DEB8F6
8BD8293FFE0E7B078A6D57A63E81489E93C888C3051F9CEB3D3B5E6FD4740F96
430E85ED0F1ECAB6D0AE2D874BFF3CBB8A7381BCB20A583F2CD43943417BD944
7654DE6FA7C437C2551DD65DBC48259ED5467B19BCE8F8C85473A6C76E78360A
EAA427C32E4552AB53563ADB619A15BDB33D7FE8D30E2D852C2D85A4AAA1700A
ECD71EC785F8DA067723FA68E0E4B083014B782A3B0ACFA06B7B15A3081004AC
D4E4624A22F47ADC123844E6E190AAE7C951945443CC55501814A469413BCCE9
2B705371BB4> |-
systemdict /gcheck known {setglobal} if end {end} if
end
YQVXDE+Inconsolata /Encoding get
dup 61 /braceright put
pop
%ADOEndSubsetFont
/YQVXDE+Inconsolata*1 
[33{/.notdef}rp /v /a /r /space /equal /zero /semicolon 
/c /g /e /t /parenleft /greater /o /n 
/R /q /parenright /f /u /i /braceleft /b 
/period /d /plus /p /comma /braceright 194{/.notdef}rp]
YQVXDE+Inconsolata nf
YQVXDE+Inconsolata*1 [12 0 0 -12 0 0 ]msf
12.1655 183.088 mo
($$$$=2')
[6 6 6 6 6 6 0 ]xsh
12.1655 197.488 mo
($$=2')
[6 6 6 6 0 ]xsh
12.1655 211.888 mo
(=2')
[6 6 0 ]xsh
gsave
0 0 mo
445.583 0 li
445.583 216.113 li
0 216.113 li
cp
clp
[] 0 dsh
231.165 215.5 mo
231.165 215.5 li
0 0 0 1 cmyk
@
[0 2.007 ] 0 dsh
229.158 215.5 mo
1.3331 215.5 li
@
[] 0 dsh
.3294 215.5 mo
.3294 215.5 li
@
[0 1.992 ] 0 dsh
.3294 213.508 mo
.3294 11.345 li
@
[] 0 dsh
.3294 10.3493 mo
.3294 10.3493 li
@
grestore
[0 2.007 ] 0 dsh
2.3367 10.3493 mo
230.162 10.3493 li
0 0 0 1 cmyk
@
[] 0 dsh
231.165 10.3493 mo
231.165 10.3493 li
@
[0 1.992 ] 0 dsh
231.165 12.3411 mo
231.165 214.504 li
@
[] 0 dsh
228.265 201.5 mo
228.265 201.5 li
@
[0 1.999 ] 0 dsh
226.266 201.5 mo
13.3296 201.5 li
@
[] 0 dsh
12.3294 201.5 mo
12.3294 201.5 li
@
[0 2.015 ] 0 dsh
12.3294 199.484 mo
12.3294 77.5635 li
@
[] 0 dsh
12.3294 76.5564 mo
12.3294 76.5564 li
@
[0 1.999 ] 0 dsh
14.3288 76.5564 mo
227.265 76.5564 li
@
[] 0 dsh
228.265 76.5564 mo
228.265 76.5564 li
@
[0 2.015 ] 0 dsh
228.265 78.5716 mo
228.265 200.493 li
@
[] 0 dsh
225.644 187 mo
225.644 187 li
@
[0 2.008 ] 0 dsh
223.636 187 mo
25.8337 187 li
@
[] 0 dsh
24.8294 187 mo
24.8294 187 li
@
[0 2.02 ] 0 dsh
24.8294 184.98 mo
24.8294 115.287 li
@
[] 0 dsh
24.8294 114.277 mo
24.8294 114.277 li
@
[0 2.008 ] 0 dsh
26.8376 114.277 mo
224.64 114.277 li
@
[] 0 dsh
225.644 114.277 mo
225.644 114.277 li
@
[0 2.02 ] 0 dsh
225.644 116.297 mo
225.644 185.99 li
@
[] 0 dsh
223.175 172.5 mo
223.175 172.5 li
@
[0 2.002 ] 0 dsh
221.173 172.5 mo
37.9598 172.5 li
@
[] 0 dsh
36.9583 172.5 mo
36.9583 172.5 li
@
[0 1.994 ] 0 dsh
36.9583 170.505 mo
36.9583 153.553 li
@
[] 0 dsh
36.9583 152.556 mo
36.9583 152.556 li
@
[0 2.002 ] 0 dsh
38.9607 152.556 mo
222.174 152.556 li
@
[] 0 dsh
223.175 152.556 mo
223.175 152.556 li
@
[0 1.994 ] 0 dsh
223.175 154.551 mo
223.175 171.503 li
@
0 .992 .636 0 cmyk
YQVXDE+Inconsolata*1 [12 0 0 -12 0 0 ]msf
259.165 96.2619 mo
(!"#)
[6 6 0 ]xsh
.75 .68 .67 .902 cmyk
YQVXDE+Inconsolata*1 [12 0 0 -12 0 0 ]msf
277.165 96.2619 mo
($7)
[6 0 ]xsh
.656 .583 .571 .374 cmyk
YQVXDE+Inconsolata*1 [12 0 0 -12 0 0 ]msf
289.165 96.2619 mo
($%$)
[6 6 0 ]xsh
.75 .68 .67 .902 cmyk
YQVXDE+Inconsolata*1 [12 0 0 -12 0 0 ]msf
307.165 96.2619 mo
(#*18\(.4/+')
[6 6 6 6 6 6 6 6 6 0 ]xsh
259.165 110.662 mo
(#*"9,)
[6 6 6 6 0 ]xsh
0 .992 .636 0 cmyk
%ADOBeginSubsetFont: OUOBAA+Inconsolata AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.
systemdict begin
YQVXDE+Inconsolata dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/hyphen <1C60D8A8C9B7A73DB1B29E0827EFDDA55712A4F087B25C2FF28D29E
04012B3B867BE458C9B8286DB3C23BA06F6041A25123D87B80AC2> |-
systemdict /gcheck known {setglobal} if end {end} if
end
YQVXDE+Inconsolata /Encoding get
dup 62 /hyphen put
pop
%ADOEndSubsetFont
/YQVXDE+Inconsolata*1 
[33{/.notdef}rp /v /a /r /space /equal /zero /semicolon 
/c /g /e /t /parenleft /greater /o /n 
/R /q /parenright /f /u /i /braceleft /b 
/period /d /plus /p /comma /braceright /hyphen 193{/.notdef}rp]
YQVXDE+Inconsolata nf
YQVXDE+Inconsolata*1 [12 0 0 -12 0 0 ]msf
289.165 110.662 mo
(>-)
[6 0 ]xsh
.75 .68 .67 .902 cmyk
YQVXDE+Inconsolata*1 [12 0 0 -12 0 0 ]msf
301.165 110.662 mo
($"992')
[6 6 6 6 6 0 ]xsh
0 .992 .636 0 cmyk
%ADOBeginSubsetFont: OUOBAA+Inconsolata AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.
systemdict begin
YQVXDE+Inconsolata dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/l <1C60D8A8C9B7A73DB1B29E326961197B7D799B6B2599F9F1A0C593A9164D
3DA848E3D8E0344AC0F5FC2AA5FB97B216D4A8B27AA402C842FB15B2D5A08504
C9BF629293FFE464A79D83CAEE46D101E6AEB3B7833A3681CC77E6711F783399
C39E951DADF89C53D9509B7CA3EC> |-
/x <1C60D8A8C9B7A73DB1B29E9EE0485C30F0A479B05AF80F46C0CFB990AEEA
CA824D51C541104A26927C68FAD9E8FB2BE5EE6C17E367D498195ADE8C4387F8
FCE3C765F13667C614DD18336FD688BFBB8820B01BD1DC874018140495C4ABC8
BA61B3004B7D342AF04719C141D503DBD4601838DDEAC61360CF774F27C989AA
A18A764744B783330AB68BF11B6E381C4DC26C1E7FB1B31023E5176CBA51C80D
87135177CD1D41D8A4BAB409EF7BF3E981B0C611EBE182BFAAF11EB2BECC2ECB> |-
systemdict /gcheck known {setglobal} if end {end} if
end
YQVXDE+Inconsolata /Encoding get
dup 63 /l put
dup 64 /x put
pop
%ADOEndSubsetFont
/YQVXDE+Inconsolata*1 
[33{/.notdef}rp /v /a /r /space /equal /zero /semicolon 
/c /g /e /t /parenleft /greater /o /n 
/R /q /parenright /f /u /i /braceleft /b 
/period /d /plus /p /comma /braceright /hyphen /l 
/x 191{/.notdef}rp]
YQVXDE+Inconsolata nf
YQVXDE+Inconsolata*1 [12 0 0 -12 0 0 ]msf
249.745 78.7659 mo
(3?@$)
[6 5.99998 6 0 ]xsh
.75 .68 .67 .902 cmyk
YQVXDE+Inconsolata*1 [12 0 0 -12 0 0 ]msf
273.745 78.7659 mo
(./0*1)
[6 6 6 6 0 ]xsh
0 .992 .636 0 cmyk
YQVXDE+Inconsolata*1 [12 0 0 -12 0 0 ]msf
249.745 135.766 mo
(3?@$)
[6 5.99998 6 0 ]xsh
.75 .68 .67 .902 cmyk
YQVXDE+Inconsolata*1 [12 0 0 -12 0 0 ]msf
273.745 135.766 mo
("99)
[6 6 0 ]xsh
0 .992 .636 0 cmyk
YQVXDE+Inconsolata*1 [12 0 0 -12 0 0 ]msf
249.745 189.262 mo
(3?@$)
[6 5.99998 6 0 ]xsh
.75 .68 .67 .902 cmyk
YQVXDE+Inconsolata*1 [12 0 0 -12 0 0 ]msf
273.745 189.262 mo
(*/9)
[6 6 0 ]xsh
gsave
0 0 mo
445.583 0 li
445.583 216.113 li
0 216.113 li
cp
clp
0 .992 .636 0 cmyk
YQVXDE+Inconsolata*1 [12 0 0 -12 0 0 ]msf
249.748 8.76141 mo
(3?@$)
[6 6.00002 6 0 ]xsh
.75 .68 .67 .902 cmyk
%ADOBeginSubsetFont: OUOBAA+Inconsolata AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.
systemdict begin
YQVXDE+Inconsolata dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/m <1C60D8A8C9B7A73DB1B29E1DA499D4957171AA9385D3BFE6006964AF1585
6AAA76CC10545651F79C2586581B07CE47955A5394B672FE361F72063BDDE86D
133FCFB0B1346FE0624657F37662FD29A5A89B2FFD441C8B9535ADC920F478A9
C7AD9173181BF2F983A9807E6F1C69EC73DA04851A09884919D47E246B105B6E
180494C58E1BA9844E98487683BF05D61286995E2F4A351BC83BBDA0CB3BA556
F889DA8B2B1147AF73FBA3400C337608166A094A6C207365233794B8F54D3E16
E8D38A76F777E8A49F98B3C22A514A1EAD83C6E6DA9760153C37FCDE813658EE
86386355B307E8B1141F5E75D4851386B52BB4654D5D1EF1B2236CF92B7DF0B2
30AD712717B8B20AB996D86AF9AAD0B65504B6A1F871DAC46089BC0AD30D8D07
FD39058FFEF665589C028FFB9A67FC6164A6A50F8095A5E994ED3267A69B59D2
6BA8683762404A0783F502166367B406A2BA98B0AE7F3C309063FF00D7145F1A
3B89045CA4168599FC87CF8BC3EA5DE9F1CB6866115441A25E2E1FFE2D4B3065
D9790F4F9C15A4D32CE0B493420272683BE6E45039BBDE8F6F11FD4F0548D83F
9EABAB98DD216EF9A650DB1BDABC65EA5FC78F4FA7C3AB29E52B6162AF3EC892
D436A9CBDC1A14AF3C03819C4E572A07C1D5A1EC8624F9047A883683452F8459
16FB2E73F0380ECEDD9B43E2828E8075B726F9E7666E0C3C49BC0C7984FDA3E4
CC8A01B85AF8D484A15F465AFD6342109706FE0C182C01B632D875049A49E960
347013C1868E4534360F174541FE4176934DD50B18681336CDD9AB9DA9AD4407
136744FE51801BFB1443B24795D96942F99F7413> |-
systemdict /gcheck known {setglobal} if end {end} if
end
YQVXDE+Inconsolata /Encoding get
dup 65 /m put
pop
%ADOEndSubsetFont
/YQVXDE+Inconsolata*1 
[33{/.notdef}rp /v /a /r /space /equal /zero /semicolon 
/c /g /e /t /parenleft /greater /o /n 
/R /q /parenright /f /u /i /braceleft /b 
/period /d /plus /p /comma /braceright /hyphen /l 
/x /m 190{/.notdef}rp]
YQVXDE+Inconsolata nf
YQVXDE+Inconsolata*1 [12 0 0 -12 0 0 ]msf
273.748 8.76141 mo
(A"5/)
[6 6 6 0 ]xsh
grestore
%ADOBeginSubsetFont: OUOBAA+Inconsolata AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.
systemdict begin
YQVXDE+Inconsolata dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/underscore <1C60D8A8C9B7A73DB1B29E1E4336B3C968D4EDEB2E2DE45F5D7
08D9EE1C45F9264080C2908DEE55664CEF2DD745213611F618BE199A2> |-
systemdict /gcheck known {setglobal} if end {end} if
end
YQVXDE+Inconsolata /Encoding get
dup 66 /underscore put
pop
%ADOEndSubsetFont
/YQVXDE+Inconsolata*1 
[33{/.notdef}rp /v /a /r /space /equal /zero /semicolon 
/c /g /e /t /parenleft /greater /o /n 
/R /q /parenright /f /u /i /braceleft /b 
/period /d /plus /p /comma /braceright /hyphen /l 
/x /m /underscore 189{/.notdef}rp]
YQVXDE+Inconsolata nf
YQVXDE+Inconsolata*1 [12 0 0 -12 0 0 ]msf
384.165 206.209 mo
(\()sh
413.745 135.757 mo
(\)#;B\()
[6 6 6 6 0 ]xsh
384.165 96.2532 mo
(7)sh
259.161 152.365 mo
(")sh
.656 .583 .571 .374 cmyk
YQVXDE+Inconsolata*1 [12 0 0 -12 0 0 ]msf
265.161 152.365 mo
($:%$)
[6 6 6 0 ]xsh
.75 .68 .67 .902 cmyk
YQVXDE+Inconsolata*1 [12 0 0 -12 0 0 ]msf
289.161 152.365 mo
(7)sh
.656 .583 .571 .374 cmyk
YQVXDE+Inconsolata*1 [12 0 0 -12 0 0 ]msf
295.161 152.365 mo
($:$)
[6 6 0 ]xsh
.75 .68 .67 .902 cmyk
YQVXDE+Inconsolata*1 [12 0 0 -12 0 0 ]msf
313.161 152.365 mo
(\($:$!')
[6 6 6 6 6 0 ]xsh
259.161 166.765 mo
(4;9"+*,"<$)
[6 6 6 6 6 6 6 6 6 0 ]xsh
0 .992 .636 0 cmyk
YQVXDE+Inconsolata*1 [12 0 0 -12 0 0 ]msf
319.161 166.765 mo
(>-$)
[6 6 0 ]xsh
.75 .68 .67 .902 cmyk
YQVXDE+Inconsolata*1 [12 0 0 -12 0 0 ]msf
337.161 166.765 mo
(*/92')
[6 6 6 6 0 ]xsh
259.161 206.617 mo
(\($%$4;9+')
[6 6 6 6 6 6 6 6 0 ]xsh
382.655 79.9835 mo
377.474 76.9915 li
382.655 73.9995 li
cp
0 0 0 1 cmyk
f
.75 .68 .67 .902 cmyk
YQVXDE+Inconsolata*1 [12 0 0 -12 0 0 ]msf
397.634 172.199 mo
(4;9+)
[6 6 6 0 ]xsh
0 lc
[] 0 dsh
397.458 93.5612 mo
397.458 99.0792 392.985 103.553 387.466 103.553 cv
381.948 103.553 377.475 99.0792 377.475 93.5612 cv
377.475 88.0432 381.948 83.5692 387.466 83.5692 cv
392.985 83.5692 397.458 88.0432 397.458 93.5612 cv
cp
0 0 0 1 cmyk
@
397.458 203.626 mo
397.458 209.144 392.985 213.618 387.466 213.618 cv
381.948 213.618 377.475 209.144 377.475 203.626 cv
377.475 198.108 381.948 193.634 387.466 193.634 cv
392.985 193.634 397.458 198.108 397.458 203.626 cv
cp
@
.75 .68 .67 .902 cmyk
YQVXDE+Inconsolata*1 [12 0 0 -12 0 0 ]msf
384.165 152.166 mo
("<\()
[6 6 0 ]xsh
gsave
0 0 mo
445.583 0 li
445.583 216.113 li
0 216.113 li
cp
clp
239.083 11.9997 mo
239.083 216.113 li
0 0 0 1 cmyk
@
397.462 159.471 mo
402.98 159.471 407.454 154.998 407.454 149.479 cv
407.454 143.961 402.98 139.488 397.462 139.488 cv
387.466 139.488 li
381.948 139.488 377.474 143.961 377.474 149.479 cv
377.474 154.998 381.948 159.471 387.466 159.471 cv
397.462 159.471 li
cp
@
1 lw
1 lc
376.099 186.429 mo
376.099 186.429 li
@
[0 2.463 ] 0 dsh
378.562 186.429 mo
378.987 186.429 li
393.084 186.429 392.214 164.5 378.987 163.5 cv
373.025 163.5 li
@
[] 0 dsh
371.793 163.5 mo
371.793 163.5 li
@
376.974 189.421 mo
371.793 186.429 li
376.974 183.437 li
cp
f
393.552 172.999 mo
382.696 172.999 li
382.696 164.179 li
393.552 164.179 li
cp
0 0 0 0 cmyk
f
.5 lw
0 lc
1 lj
393.552 172.999 mo
382.696 172.999 li
382.696 164.179 li
393.552 164.179 li
cp
0 0 0 1 cmyk
@
.25 lw
393.299 164.738 mo
388.124 169.913 li
382.948 164.738 li
@
390.214 169.914 mo
393.299 172.999 li
@
382.949 172.999 mo
386.035 169.913 li
@
grestore
YQVXDE+Inconsolata*1 [12 0 0 -12 0 0 ]msf
397.634 115.923 mo
(!<7)
[6 6 0 ]xsh
1 lw
1 lc
376.099 132.152 mo
376.099 132.152 li
0 0 0 1 cmyk
@
[0 2.554 ] 0 dsh
378.653 132.152 mo
378.987 132.152 li
393.083 132.152 392.214 108.223 378.987 107.223 cv
373.07 107.223 li
@
[] 0 dsh
371.793 107.223 mo
371.793 107.223 li
@
376.974 135.144 mo
371.793 132.152 li
376.974 129.16 li
cp
f
393.552 116.722 mo
382.696 116.722 li
382.696 107.902 li
393.552 107.902 li
cp
0 0 0 0 cmyk
f
.5 lw
0 lc
1 lj
393.552 116.722 mo
382.696 116.722 li
382.696 107.902 li
393.552 107.902 li
cp
0 0 0 1 cmyk
@
.25 lw
393.299 108.46 mo
388.124 113.635 li
382.948 108.46 li
@
390.214 113.637 mo
393.299 116.722 li
@
382.949 116.722 mo
386.035 113.636 li
@
.75 .68 .67 .902 cmyk
YQVXDE+Inconsolata*1 [12 0 0 -12 0 0 ]msf
397.634 62.7624 mo
(#*1)
[6 6 0 ]xsh
1 lw
1 lc
0 lj
376.099 76.9918 mo
376.099 76.9918 li
0 0 0 1 cmyk
@
[0 2.463 ] 0 dsh
378.562 76.9918 mo
378.987 76.9918 li
393.084 76.9918 392.214 55.0628 378.987 54.0628 cv
373.025 54.0628 li
@
[] 0 dsh
371.793 54.0624 mo
371.793 54.0624 li
@
376.974 79.9835 mo
371.793 76.9915 li
376.974 73.9995 li
cp
f
393.552 63.562 mo
382.696 63.562 li
382.696 54.742 li
393.552 54.742 li
cp
0 0 0 0 cmyk
f
.5 lw
0 lc
1 lj
393.552 63.562 mo
382.696 63.562 li
382.696 54.742 li
393.552 54.742 li
cp
0 0 0 1 cmyk
@
.25 lw
393.299 55.3002 mo
388.124 60.4752 li
382.948 55.3002 li
@
390.214 60.4763 mo
393.299 63.5613 li
@
382.949 63.5616 mo
386.035 60.4756 li
@
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
] del_res
/YQVXDE+Inconsolata*1 uf
/YQVXDE+Inconsolata uf
/OUOBAA+Inconsolata uf
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
showpage
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
