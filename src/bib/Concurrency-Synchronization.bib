Automatically generated by Mendeley Desktop 1.14.1-dev7
Any changes to this file will be lost if it is regenerated by Mendeley.

BibTeX export options can be customized via Options -> BibTeX in Mendeley Desktop

@article{Gustafsson2005,
author = {Gustafsson, A},
file = {:home/etn/Documents/PhD/Biblio/Gustafsson - 2005 - Threads without the pain.pdf:pdf},
journal = {Queue},
title = {{Threads without the pain}},
url = {http://dl.acm.org/citation.cfm?id=1105678},
year = {2005}
}
@article{Behren2003,
author = {von Behren, JR and Condit, J and Brewer, EA},
file = {:home/etn/Documents/PhD/Biblio/Behren, Condit, Brewer - 2003 - Why Events Are a Bad Idea (for High-Concurrency Servers).pdf:pdf},
journal = {HotOS},
title = {{Why Events Are a Bad Idea (for High-Concurrency Servers).}},
url = {http://static.usenix.org/publications/library/proceedings/hotos03/tech/full_papers/vonbehren/vonbehren_html/},
year = {2003}
}
@article{Dijkstra,
annote = {This is the reference paper for Semaphores.},
author = {Dijkstra, Edsger},
file = {:home/etn/Documents/PhD/Biblio/Dijkstra - Unknown - Over de sequentialiteit van procesbeschrijvingen.PDF:PDF},
title = {{Over de sequentialiteit van procesbeschrijvingen}}
}
@article{Li2007,
author = {Li, P and Zdancewic, S},
file = {:home/etn/Documents/PhD/Biblio/Li, Zdancewic - 2007 - Combining events and threads for scalable network services implementation and evaluation of monadic, application-.pdf:pdf},
journal = {ACM SIGPLAN Notices},
title = {{Combining events and threads for scalable network services implementation and evaluation of monadic, application-level concurrency primitives}},
url = {http://dl.acm.org/citation.cfm?id=1250756},
year = {2007}
}
@article{Hansen1978a,
author = {Hansen, P.B. and Staunstrup, J.},
doi = {10.1109/TSE.1978.233856},
issn = {0098-5589},
journal = {IEEE Transactions on Software Engineering},
keywords = {Computer science,Concurrent programs,Delay,Programming profession,Specification languages,Sufficient conditions,guarded regions,mutual exclusion,program implementation,program specification,program verification,transition commands},
language = {English},
month = {sep},
number = {5},
pages = {365--370},
publisher = {IEEE},
title = {{Specification and Implementation of Mutual Exclusion}},
url = {http://ieeexplore.ieee.org/articleDetails.jsp?arnumber=1702551},
volume = {SE-4},
year = {1978}
}
@article{Lauer1979,
author = {Lauer, HC and Needham, RM},
file = {:home/etn/Documents/PhD/Biblio/Lauer, Needham - 1979 - On the duality of operating system structures.pdf:pdf},
journal = {ACM SIGOPS Operating Systems Review},
title = {{On the duality of operating system structures}},
url = {http://dl.acm.org/citation.cfm?id=850658},
year = {1979}
}
@book{Luckham2002,
author = {Luckham, DC},
title = {{The power of events}},
url = {https://sisis.rz.htw-berlin.de/inh2010/12375999.pdf},
year = {2002}
}
@book{Welsh2000,
author = {Welsh, M and Gribble, SD and Brewer, EA and Culler, D},
file = {:home/etn/Documents/PhD/Biblio/Welsh et al. - 2000 - A design framework for highly concurrent systems.pdf:pdf},
keywords = {Event,SEDA},
mendeley-tags = {Event,SEDA},
title = {{A design framework for highly concurrent systems}},
url = {http://www.cs.berkeley.edu/$\sim$culler/papers/events.pdf},
year = {2000}
}
@article{Behren2003a,
author = {Behren, R Von and Condit, J and Zhou, F},
file = {:home/etn/Documents/PhD/Biblio/Behren, Condit, Zhou - 2003 - Capriccio scalable threads for internet services.pdf:pdf},
journal = {ACM SIGOPS \ldots},
keywords = {Capriccio,Thread},
mendeley-tags = {Capriccio,Thread},
title = {{Capriccio: scalable threads for internet services}},
url = {http://dl.acm.org/citation.cfm?id=945471},
year = {2003}
}
@article{Ousterhout1996,
author = {Ousterhout, J},
file = {:home/etn/Documents/PhD/Biblio/Ousterhout - 1996 - Why threads are a bad idea (for most purposes).pdf:pdf},
journal = {Presentation given at the 1996 Usenix Annual Conference},
title = {{Why threads are a bad idea (for most purposes)}},
url = {http://chess.cs.umd.edu/class/spring2009/cmsc433/Lectures/threadVsEvents.pdf},
year = {1996}
}
@article{Jr1989,
author = {Jr, GL Steele},
file = {:home/etn/Documents/PhD/Biblio/Jr - 1989 - Making asynchronous parallelism safe for the world.pdf:pdf},
journal = {Proceedings of the 17th ACM SIGPLAN-SIGACT  \ldots},
title = {{Making asynchronous parallelism safe for the world}},
url = {http://dl.acm.org/citation.cfm?id=96731},
year = {1989}
}
@article{Rotem-Gal-Oz2006,
author = {Rotem-Gal-Oz, A},
journal = {\ldots http://www. rgoarchitects. com/Files/fallacies. \ldots},
title = {{Fallacies of distributed computing explained}},
url = {http://www.rgoarchitects.com/Files/fallacies.pdf},
year = {2006}
}
@article{Adya2002,
author = {Adya, A and Howell, J and Theimer, M},
file = {:home/etn/Documents/PhD/Biblio/Adya, Howell, Theimer - 2002 - Cooperative Task Management Without Manual Stack Management.pdf:pdf},
journal = {USENIX Annual Technical Conference},
title = {{Cooperative Task Management Without Manual Stack Management.}},
url = {http://static.usenix.org/publications/library/proceedings/usenix02/full_papers/adyahowell/adyahowell_html/},
year = {2002}
}
@article{Pai1999,
author = {Pai, VS and Druschel, P and Zwaenepoel, W},
file = {:home/etn/Documents/PhD/Biblio/Pai, Druschel, Zwaenepoel - 1999 - Flash An efficient and portable Web server.pdf:pdf},
journal = {USENIX Annual Technical Conference},
keywords = {Flash,event},
mendeley-tags = {Flash,event},
title = {{Flash: An efficient and portable Web server.}},
url = {https://www.usenix.org/event/usenix99/full_papers/pai/pai_html/node7.html},
year = {1999}
}
@inproceedings{Jr1990,
abstract = {We need a programming model that com- bines the advantages of the synchronous and asyn- chronous parallel styles. Synchronous programs are de- terminate (thus easier to reason about) and avoid syn- chronization overheads. Asynchronous programs are more flexible and handle conditionals more efficiently. Here we propose a programming model with the ben- efits of both styles. We allow asynchronous threads of control but restrict shared-memory accesses and other side effects so as to prevent the behavior of the program from depending on any accidents of execution order that can arise from the indeterminacy of the asynchronous process model. These restrictions may be enforced either dynam- ically (at run time) or statically (at compile time). In this paper we concentrate on dynamic enforcement, and exhibit an implementation of a parallel dialect of Scheme based on these ideas. A single successful exe- cution of a parallel program in this model constitutes a proof that the program is free of race conditions (for that particular set of input data). We also speculate on a design for a programming lan- guage using static enforcement. The notion of distinct- ness is important to proofs of noninterference. An ap- propriately designed programming language must sup port such concepts as “all the elements of this array are distinct,” perhaps through its type system. This parallel programming model does not support all styles of parallel programming, but we argue that it can support a large class of interesting algorithms with considerably greater efficiency (in some cases) than a strict SIMD approach and considerably greater safety (in all cases) than a full-blown MIMD approach.},
author = {Guy, L and Steele, Jr},
booktitle = {Proceedings of the 17th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages},
doi = {10.1145/96709.96731},
isbn = {0-89791-343-4},
issn = {07308566},
pages = {218--231},
title = {{Making asynchronous parallelism safe for the world}},
url = {http://dl.acm.org/citation.cfm?id=96731},
year = {1990}
}
@article{Reed2012,
author = {Reed, DP},
file = {:home/etn/Documents/PhD/Biblio/Reed - 2012 - Simultaneous Considered Harmful Modular Parallelism.pdf:pdf},
journal = {HotPar},
title = {{" Simultaneous" Considered Harmful: Modular Parallelism.}},
url = {https://scholar.google.com/scholar?q=%E2%80%9CSimultaneous%E2%80%9D+Considered+Harmful%3A+Modular+Parallelism&btnG=&hl=en&as_sdt=0%2C39#0},
year = {2012}
}
@article{Gribble2001,
author = {Gribble, SD and Welsh, M and Behren, R Von},
file = {:home/etn/Documents/PhD/Biblio/Gribble, Welsh, Behren - 2001 - The Ninja architecture for robust Internet-scale systems and services.pdf:pdf},
journal = {Computer Networks},
title = {{The Ninja architecture for robust Internet-scale systems and services}},
url = {http://www.sciencedirect.com/science/article/pii/S1389128600001791},
year = {2001}
}
@article{Hoare1974,
author = {Hoare, C. A. R.},
doi = {10.1145/355620.361161},
file = {:home/etn/Documents/PhD/Biblio/Hoare - 1974 - Monitors an operating system structuring concept.pdf:pdf},
issn = {00010782},
journal = {Communications of the ACM},
keywords = {monitors,mutual exclusion,operating systems,scheduling,structured multiprogramming,synchronization,system implementation languages},
month = {oct},
number = {10},
pages = {549--557},
publisher = {ACM},
title = {{Monitors: an operating system structuring concept}},
url = {http://dl.acm.org/citation.cfm?id=355620.361161},
volume = {17},
year = {1974}
}
@article{Chandy2006,
author = {Chandy, KM},
file = {:home/etn/Documents/PhD/Biblio/Chandy - 2006 - Event-driven applications Costs, benefits and design approaches.pdf:pdf},
journal = {Gartner Application Integration and Web Services \ldots},
title = {{Event-driven applications: Costs, benefits and design approaches}},
url = {https://scholar.google.com/scholar?q=Event-Driven Applications: Costs, Benefits and Design Approaches&btnG=Search&as_sdt=800000000001&as_sdtp=on#0},
year = {2006}
}
@article{Krohn2007,
author = {Krohn, MN and Kohler, E and Kaashoek, MF},
file = {:home/etn/Documents/PhD/Biblio/Krohn, Kohler, Kaashoek - 2007 - Events Can Make Sense.pdf:pdf},
journal = {USENIX Annual Technical Conference},
keywords = {TAME,event},
mendeley-tags = {TAME,event},
title = {{Events Can Make Sense.}},
url = {https://www.usenix.org/legacy/events/usenix07/tech/full_papers/krohn/krohn_html/},
year = {2007}
}
