Automatically generated by Mendeley Desktop 1.14.1-dev7
Any changes to this file will be lost if it is regenerated by Mendeley.

BibTeX export options can be customized via Options -> BibTeX in Mendeley Desktop

@article{Radoi2014,
author = {Radoi, C and Fink, SJ and Rabbah, R and Sridharan, M},
file = {:home/etn/Documents/PhD/Biblio/Radoi et al. - 2014 - Translating imperative code to MapReduce.pdf:pdf},
journal = {Proceedings of the 2014 ACM International Conference on Object Oriented Programming Systems Languages and Applications},
title = {{Translating imperative code to MapReduce}},
url = {http://dl.acm.org/citation.cfm?id=2660228},
year = {2014}
}
@article{Amarasinghe1995,
author = {Amarasinghe, SP and Anderson, JAM and Lam, MS and Tseng, CW},
file = {:home/etn/Documents/PhD/Biblio/Amarasinghe et al. - 1995 - An Overview of the SUIF Compiler for Scalable Parallel Machines.pdf:pdf},
journal = {PPSC},
title = {{An Overview of the SUIF Compiler for Scalable Parallel Machines.}},
url = {http://www.researchgate.net/publication/2646829_Chapter_1_An_Overview_of_the_SUIF_Compiler_for_Scalable_Parallel_Machines/file/60b7d5193bc4fef52b.pdf},
year = {1995}
}
@article{Beck1991,
author = {Beck, Micah and Johnson, Richard and Pingali, Keshav},
doi = {10.1016/0743-7315(91)90016-3},
file = {:home/etn/Documents/PhD/Biblio/Beck, Johnson, Pingali - 1991 - From control flow to dataflow.ps\;jsessionid=D4194E1CBD3276E264A2D1FD1507F780:ps;jsessionid=D4194E1CBD3276E264A2D1FD1507F780},
issn = {07437315},
journal = {Journal of Parallel and Distributed Computing},
number = {2},
pages = {118--129},
title = {{From control flow to dataflow}},
volume = {12},
year = {1991}
}
@article{Mark2003,
author = {Mark, WR and Glanville, RS},
file = {:home/etn/Documents/PhD/Biblio/Mark, Glanville - 2003 - Cg A system for programming graphics hardware in a C-like language.pdf:pdf},
journal = {\ldots  Transactions on Graphics ( \ldots},
title = {{Cg: A system for programming graphics hardware in a C-like language}},
url = {http://dl.acm.org/citation.cfm?id=882362},
year = {2003}
}
@article{Rinard1996,
author = {Rinard, MC and Diniz, PC},
file = {:home/etn/Documents/PhD/Biblio/Rinard, Diniz - 1996 - Commutativity analysis A new analysis framework for parallelizing compilers.pdf:pdf},
journal = {ACM SIGPLAN Notices},
title = {{Commutativity analysis: A new analysis framework for parallelizing compilers}},
url = {http://dl.acm.org/citation.cfm?id=231390},
year = {1996}
}
@article{Buck2004,
author = {Buck, I and Foley, T and Horn, D},
file = {:home/etn/Documents/PhD/Biblio/Buck, Foley, Horn - 2004 - Brook for GPUs stream computing on graphics hardware.pdf:pdf},
journal = {\ldots  on Graphics (TOG)},
title = {{Brook for GPUs: stream computing on graphics hardware}},
url = {http://dl.acm.org/citation.cfm?id=1015800},
year = {2004}
}
@article{Amarasinghe1994,
author = {Amarasinghe, SP and Anderson, JM},
journal = {\ldots  and Compilers for Parallel \ldots},
title = {{An overview of a compiler for scalable parallel machines}},
url = {http://link.springer.com/chapter/10.1007/3-540-57659-2_15},
year = {1994}
}
@article{Amini2012,
author = {Amini, M},
title = {{Transformations de programme automatiques et source-\`{a}-source pour acc\'{e}l\'{e}rateurs mat\'{e}riels de type GPU}},
url = {http://hal.archives-ouvertes.fr/pastel-00958033/},
year = {2012}
}
@article{McCool2010,
author = {McCool, MD},
file = {:home/etn/Documents/PhD/Biblio/McCool - 2010 - Structured parallel programming with deterministic patterns.pdf:pdf},
journal = {Proceedings of the 2nd USENIX conference on Hot  \ldots},
title = {{Structured parallel programming with deterministic patterns}},
url = {https://www.usenix.org/event/hotpar10/tech/full_papers/McCool.pdf},
year = {2010}
}
@article{Fernandez2014a,
author = {Fernandez, Raul Castro and Migliavacca, Matteo and Kalyvianaki, Evangelia and Pietzuch, Peter},
file = {:home/etn/Documents/PhD/Biblio/Fernandez et al. - 2014 - Making state explicit for imperative big data processing.pdf:pdf},
journal = {USENIX ATC},
title = {{Making state explicit for imperative big data processing}},
url = {https://www.usenix.org/system/files/conference/atc14/atc14-paper-castro_fernandez.pdf},
year = {2014}
}
@inproceedings{Kamruzzaman2013,
address = {New York, New York, USA},
author = {Kamruzzaman, Md and Swanson, Steven and Tullsen, Dean M.},
booktitle = {Proceedings of the International Conference for High Performance Computing, Networking, Storage and Analysis on - SC '13},
doi = {10.1145/2503210.2503295},
file = {:home/etn/Documents/PhD/Biblio/Kamruzzaman, Swanson, Tullsen - 2013 - Load-balanced pipeline parallelism.pdf:pdf},
isbn = {9781450323789},
keywords = {Instruction sets,Load management,Pipeline processing,Pipelines,Synchronization,chip multiprocessors,compiler-based technique,compilers,data parallel fashion,inter-thread communication,load-balanced pipeline parallelism,load-balancing,locality,multiprocessing systems,parallel processing,parallel systems,pipeline parallelism,pipeline processing,pipeline stage automatic extraction,program compilers,resource allocation,sequential stages,sequential threads,single thread acceleration,synchronisation,token-based chunked synchronization},
language = {English},
pages = {1--12},
publisher = {ACM Press},
title = {{Load-balanced pipeline parallelism}},
url = {http://ieeexplore.ieee.org/articleDetails.jsp?arnumber=6877447},
year = {2013}
}
@article{Matsakis2012a,
abstract = {This paper presents a lightweight task framework and accompanying type system that statically guarantee deterministic execution. The framework is based on the familiar model of fork-join parallelism, but with two important twists. First, child tasks do not begin execution immediately upon creation, but rather they are both scheduled and joined as one atomic action; this change prevents the parent task from racing with its children. Second, the body of a child task is specified as a parallel closure. Parallel closures are a novel variation on traditional closures in which the data inherited from the environment is read-only. Parallel closures have the important property that they can be executed in parallel with one another without creating data races, even if they share the same environment. We also have a controlled means to grant mutable access to data in the environment where necessary. We have implemented a prototype of our framework in Java. The prototype includes a typechecker that enforces the constraint that parallel closures cannot modify their environment. The paper describes how the prototype has been used to implement a number of realistic examples and also explains how parallel closures can support the creation of structured parallel programming abstractions.},
author = {Matsakis, Nicholas D},
file = {:home/etn/Documents/PhD/Biblio/Matsakis - 2012 - Parallel closures a new twist on an old idea.pdf:pdf},
journal = {HotPar'12 Proceedings of the 4th USENIX conference on Hot Topics in Parallelism},
pages = {5--5},
title = {{Parallel Closures A new twist on an old idea}},
url = {http://dl.acm.org/citation.cfm?id=2342793 https://www.usenix.org/system/files/conference/hotpar12/hotpar12-final5.pdf},
year = {2012}
}
@inproceedings{Nugteren2012,
abstract = {Recent advances in multi-core and many-core processors re- quires programmers to exploit an increasing amount of par- allelism from their applications. Data parallel languages such as CUDA and OpenCL make it possible to take ad- vantage of such processors, but still require a large amount of effort from programmers. A number of parallelizing source-to-source compilers have recently been developed to ease programming of multi-core and many-core processors. This work presents and evalu- ates a number of such tools, focused in particular on C-to- CUDA transformations targeting GPUs. We compare these tools both qualitatively and quantitatively to each other and identify their strengths and weaknesses. In this paper, we address the weaknesses by presenting a new classification of algorithms. This classification is used in a new source-to-source compiler, which is based on the algo- rithmic skeletons technique. The compiler generates target code based on skeletons of parallel structures, which can be seen as parameterisable library implementations for a set of algorithm classes. We furthermore demonstrate that the presented compiler requires little modifications to the original sequential source code, generates readable code for further fine-tuning, and delivers superior performance compared to other tools for a set of 8 image processing kernels.},
address = {New York, New York, USA},
author = {Nugteren, Cedric and Corporaal, Henk},
booktitle = {Proceedings of the 5th Annual Workshop on General Purpose Processing with Graphics Processing Units},
doi = {10.1145/2159430.2159431},
file = {:home/etn/Documents/PhD/Biblio/Nugteren, Corporaal - 2012 - Introducing 'Bones' a parallelizing source-to-source compiler based on algorithmic skeletons.pdf:pdf},
isbn = {9781450312332},
keywords = {Graphics Processing Units,Parallel Programming,Source-to-Source Compilation,algorithmic skeletons},
month = {mar},
pages = {1--10},
publisher = {ACM Press},
title = {{Introducing 'Bones': a parallelizing source-to-source compiler based on algorithmic skeletons}},
url = {http://dl.acm.org/citation.cfm?id=2159430.2159431 http://dl.acm.org/citation.cfm?id=2159431},
year = {2012}
}
@article{Suleman2009,
author = {Suleman, MA and Mutlu, O},
file = {:home/etn/Documents/PhD/Biblio/Suleman, Mutlu - 2009 - Accelerating critical section execution with asymmetric multi-core architectures.pdf:pdf},
journal = {ACM SIGARCH Computer  \ldots},
title = {{Accelerating critical section execution with asymmetric multi-core architectures}},
url = {http://dl.acm.org/citation.cfm?id=1508274},
year = {2009}
}
@article{Li2012,
abstract = {This article presents a general algorithm for transforming sequential imperative programs into parallel data-flow programs. The algorithm operates on a program dependence graph in static-single-assignment form, extracting task, pipeline, and data parallelism from arbitrary control flow, and coarsening its granularity using a generalized form of typed fusion. A prototype based on GNU Compiler Collection (GCC) is applied to the automatic parallelization of recursive C programs.},
author = {Li, Feng and Pop, Antoniu and Cohen, Albert},
doi = {10.1109/MM.2012.49},
file = {:home/etn/Documents/PhD/Biblio/Li, Pop, Cohen - 2012 - Automatic Extraction of Coarse-Grained Data-Flow Threads from Imperative Programs.pdf:pdf},
issn = {0272-1732},
journal = {IEEE Micro},
keywords = {Instruction sets,Parallel processing,Pipeline processing,Radiation detectors,SSA form,Sequential analysis,Synchronization,automatic parallelization,data-flow model,loop fusion,program dependence graph,sequential imperative programs},
language = {English},
month = {jul},
number = {4},
pages = {19--31},
publisher = {IEEE Computer Society},
title = {{Automatic Extraction of Coarse-Grained Data-Flow Threads from Imperative Programs}},
url = {http://www.computer.org/csdl/mags/mi/2012/04/mmi2012040019.html},
volume = {32},
year = {2012}
}
@article{Jones2011,
author = {Hoffman, Karl Heinz and Meyer, Arnd},
title = {{Parallel Algorithms and Cluster Computing}},
url = {http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.126.2094&rep=rep1&type=pdf#page=9},
year = {2006}
}
@article{Petit2009,
author = {Petit, E},
title = {{Vers un partitionnement automatique d'applications en codelets sp\'{e}culatifs pour les syst\`{e}mes h\'{e}t\'{e}rog\`{e}nes \`{a} m\'{e}moires distribu\'{e}es}},
url = {http://hal.inria.fr/tel-00445512/},
year = {2009}
}
@inproceedings{Hall1995,
address = {New York, New York, USA},
author = {Hall, Mary H. and Amarasinghe, Saman P. and Murphy, Brian R. and Liao, Shih-Wei and Lam, Monica S.},
booktitle = {Proceedings of the 1995 ACM/IEEE conference on Supercomputing (CDROM) - Supercomputing '95},
doi = {10.1145/224170.224337},
file = {:home/etn/Documents/PhD/Biblio/Hall et al. - 1995 - Detecting coarse-grain parallelism using an interprocedural parallelizing compiler.pdf:pdf},
isbn = {0897918169},
keywords = {compiler optimizations,interprocedural data-flow analysis,parallelizing compilers,shared memory multiprocessors},
month = {dec},
pages = {49--es},
publisher = {ACM Press},
title = {{Detecting coarse-grain parallelism using an interprocedural parallelizing compiler}},
url = {http://dl.acm.org/ft_gateway.cfm?id=224337&type=html},
year = {1995}
}
@inproceedings{Vandierendonck2010a,
abstract = {Speeding up sequential programs on multicores is a challenging problem that is in urgent need of a solution. Automatic paral- lelization of irregular pointer-intensive codes, exemplified by the SPECint codes, is a very hard problem. This paper shows that, with a helping hand, such auto-parallelization is possible and fruitful. This paper makes the following contributions: (i) A compiler- framework for extracting pipeline-like parallelism from outer pro- gram loops is presented. (ii) Using a light-weight programming model based on annotations, the programmer helps the compiler to find thread-level parallelism. Each of the annotations specifies only a small piece of semantic information that compiler analy- sis misses, e.g. stating that a variable is dead at a certain program point. The annotations are designed such that correctness is eas- ily verified. Furthermore, we present a tool for suggesting annota- tions to the programmer. (iii) The methodology is applied to auto- parallelize several SPECint benchmarks. For the benchmark with most parallelism (hmmer), we obtain a scalable 7-fold speedup on an AMD quad-core dual processor. The annotations constitute a parallel programming model that relies extensively on a sequential program representation. Hereby, the complexity of debugging is not increased and it does not ob- scure the source code. These properties could prove valuable to increase the efficiency of parallel programming.},
address = {New York, New York, USA},
author = {Vandierendonck, Hans and Rul, Sean and {De Bosschere}, Koen},
booktitle = {Proceedings of the 19th international conference on Parallel architectures and compilation techniques},
doi = {10.1145/1854273.1854322},
file = {:home/etn/Documents/PhD/Biblio/Vandierendonck, Rul, De Bosschere - 2010 - The Paralax infrastructure.pdf:pdf},
isbn = {9781450301787},
keywords = {Semi-automatic parallelization,semantic annotations},
month = {sep},
pages = {389--399},
publisher = {ACM Press},
title = {{The Paralax infrastructure: automatic parallelization with a helping hand}},
url = {http://dl.acm.org/citation.cfm?id=1854273.1854322 http://portal.acm.org/citation.cfm?id=1854322},
year = {2010}
}
@book{Banerjee2013,
author = {Banerjee, U},
title = {{Loop parallelization}},
url = {https://books.google.com/books?hl=en&lr=&id=9xXrBwAAQBAJ&oi=fnd&pg=PR13&dq=loop+parallelization&ots=flLbnvNcCM&sig=a1VFNFLS3_TRjBVdpPr8mrH-0DE},
year = {2013}
}
@inproceedings{Alvaro2014,
author = {Alvaro, Peter and Conway, Neil and Hellerstein, Joseph M. and Maier, David},
booktitle = {2014 IEEE 30th International Conference on Data Engineering},
doi = {10.1109/ICDE.2014.6816639},
file = {:home/etn/Documents/PhD/Biblio/Alvaro et al. - 2014 - Blazes Coordination analysis for distributed programs.pdf:pdf},
isbn = {978-1-4799-2555-1},
keywords = {BLAZES program,Bloom declarative language,Fault tolerance,Fault tolerant systems,Semantics,Servers,Storms,Topology,Twitter,Twitter Storm system,annotated programs,application-specific coordination code synthesis,coordination protocols,cross-platform program analysis framework,distributed consistency,distributed processing,distributed programs,distributed systems,program diagnostics,program location identification,scalable distributed architectures},
language = {English},
month = {mar},
pages = {52--63},
publisher = {IEEE},
title = {{Blazes: Coordination analysis for distributed programs}},
url = {http://ieeexplore.ieee.org/articleDetails.jsp?arnumber=6816639},
year = {2014}
}
